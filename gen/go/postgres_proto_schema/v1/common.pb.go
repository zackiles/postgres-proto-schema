// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.1
// 	protoc        (unknown)
// source: postgres_proto_schema/v1/common.proto

package v1

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	descriptorpb "google.golang.org/protobuf/types/descriptorpb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Platform options for PostgreSQL deployments
type Platform int32

const (
	// buf:lint:ignore ENUM_ZERO_VALUE_SUFFIX
	Platform_PLATFORM_LATEST       Platform = 0 // Default option, latest PostgreSQL version
	Platform_PLATFORM_RDS          Platform = 1
	Platform_PLATFORM_AURORA       Platform = 2
	Platform_PLATFORM_CLOUD_SQL    Platform = 3
	Platform_PLATFORM_AZURE        Platform = 4
	Platform_PLATFORM_APSARADB     Platform = 5
	Platform_PLATFORM_HEROKU       Platform = 6
	Platform_PLATFORM_DIGITALOCEAN Platform = 7
	Platform_PLATFORM_IBMCLOUD     Platform = 8
	Platform_PLATFORM_ALIBABACLOUD Platform = 9
	Platform_PLATFORM_ELEPHANTSQL  Platform = 10
	Platform_PLATFORM_SUPABASE     Platform = 11
	Platform_PLATFORM_CITUSCLOUD   Platform = 12
	Platform_PLATFORM_SCALEGRID    Platform = 13
	Platform_PLATFORM_AIVEN        Platform = 14
	Platform_PLATFORM_ENTERPRISEDB Platform = 15
	Platform_PLATFORM_GREENPLUM    Platform = 16
	Platform_PLATFORM_TIMESCALEDB  Platform = 17
	Platform_PLATFORM_YUGABYTE     Platform = 18
	Platform_PLATFORM_CRATEDB      Platform = 19
	Platform_PLATFORM_HYPERSCALE   Platform = 20
	Platform_PLATFORM_EDB          Platform = 21
	Platform_PLATFORM_XL           Platform = 22
	Platform_PLATFORM_STOLON       Platform = 23
	Platform_PLATFORM_PATRONI      Platform = 24
	Platform_PLATFORM_CLUSTERDB    Platform = 25
	Platform_PLATFORM_POSTGRESPRO  Platform = 26
	Platform_PLATFORM_PERCONA      Platform = 27
	Platform_PLATFORM_BIGANIMAL    Platform = 28
	Platform_PLATFORM_NEON         Platform = 29
	Platform_PLATFORM_CRUNCHY      Platform = 30
	Platform_PLATFORM_15           Platform = 31
	Platform_PLATFORM_16           Platform = 32
	Platform_PLATFORM_17           Platform = 33
)

// Enum value maps for Platform.
var (
	Platform_name = map[int32]string{
		0:  "PLATFORM_LATEST",
		1:  "PLATFORM_RDS",
		2:  "PLATFORM_AURORA",
		3:  "PLATFORM_CLOUD_SQL",
		4:  "PLATFORM_AZURE",
		5:  "PLATFORM_APSARADB",
		6:  "PLATFORM_HEROKU",
		7:  "PLATFORM_DIGITALOCEAN",
		8:  "PLATFORM_IBMCLOUD",
		9:  "PLATFORM_ALIBABACLOUD",
		10: "PLATFORM_ELEPHANTSQL",
		11: "PLATFORM_SUPABASE",
		12: "PLATFORM_CITUSCLOUD",
		13: "PLATFORM_SCALEGRID",
		14: "PLATFORM_AIVEN",
		15: "PLATFORM_ENTERPRISEDB",
		16: "PLATFORM_GREENPLUM",
		17: "PLATFORM_TIMESCALEDB",
		18: "PLATFORM_YUGABYTE",
		19: "PLATFORM_CRATEDB",
		20: "PLATFORM_HYPERSCALE",
		21: "PLATFORM_EDB",
		22: "PLATFORM_XL",
		23: "PLATFORM_STOLON",
		24: "PLATFORM_PATRONI",
		25: "PLATFORM_CLUSTERDB",
		26: "PLATFORM_POSTGRESPRO",
		27: "PLATFORM_PERCONA",
		28: "PLATFORM_BIGANIMAL",
		29: "PLATFORM_NEON",
		30: "PLATFORM_CRUNCHY",
		31: "PLATFORM_15",
		32: "PLATFORM_16",
		33: "PLATFORM_17",
	}
	Platform_value = map[string]int32{
		"PLATFORM_LATEST":       0,
		"PLATFORM_RDS":          1,
		"PLATFORM_AURORA":       2,
		"PLATFORM_CLOUD_SQL":    3,
		"PLATFORM_AZURE":        4,
		"PLATFORM_APSARADB":     5,
		"PLATFORM_HEROKU":       6,
		"PLATFORM_DIGITALOCEAN": 7,
		"PLATFORM_IBMCLOUD":     8,
		"PLATFORM_ALIBABACLOUD": 9,
		"PLATFORM_ELEPHANTSQL":  10,
		"PLATFORM_SUPABASE":     11,
		"PLATFORM_CITUSCLOUD":   12,
		"PLATFORM_SCALEGRID":    13,
		"PLATFORM_AIVEN":        14,
		"PLATFORM_ENTERPRISEDB": 15,
		"PLATFORM_GREENPLUM":    16,
		"PLATFORM_TIMESCALEDB":  17,
		"PLATFORM_YUGABYTE":     18,
		"PLATFORM_CRATEDB":      19,
		"PLATFORM_HYPERSCALE":   20,
		"PLATFORM_EDB":          21,
		"PLATFORM_XL":           22,
		"PLATFORM_STOLON":       23,
		"PLATFORM_PATRONI":      24,
		"PLATFORM_CLUSTERDB":    25,
		"PLATFORM_POSTGRESPRO":  26,
		"PLATFORM_PERCONA":      27,
		"PLATFORM_BIGANIMAL":    28,
		"PLATFORM_NEON":         29,
		"PLATFORM_CRUNCHY":      30,
		"PLATFORM_15":           31,
		"PLATFORM_16":           32,
		"PLATFORM_17":           33,
	}
)

func (x Platform) Enum() *Platform {
	p := new(Platform)
	*p = x
	return p
}

func (x Platform) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Platform) Descriptor() protoreflect.EnumDescriptor {
	return file_postgres_proto_schema_v1_common_proto_enumTypes[0].Descriptor()
}

func (Platform) Type() protoreflect.EnumType {
	return &file_postgres_proto_schema_v1_common_proto_enumTypes[0]
}

func (x Platform) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Platform.Descriptor instead.
func (Platform) EnumDescriptor() ([]byte, []int) {
	return file_postgres_proto_schema_v1_common_proto_rawDescGZIP(), []int{0}
}

// PostgreSQL column types
type Type int32

const (
	// buf:lint:ignore ENUM_ZERO_VALUE_SUFFIX
	Type_TYPE_TEXT        Type = 0 // Default type string
	Type_TYPE_INTEGER     Type = 1 // Standard integer
	Type_TYPE_BIGINT      Type = 2 // Large integers, often for IDs
	Type_TYPE_BOOLEAN     Type = 3 // True/false flags
	Type_TYPE_TIMESTAMP   Type = 4 // Date and time
	Type_TYPE_TIMESTAMPTZ Type = 5 // Timezone-aware timestamp
	Type_TYPE_UUID        Type = 6 // Unique identifiers
	Type_TYPE_JSONB       Type = 7 // JSON data (binary, indexed)
	Type_TYPE_VARCHAR     Type = 8 // Variable-length strings
	Type_TYPE_NUMERIC     Type = 9 // Precise decimals
	// Moderately used types
	Type_TYPE_DATE      Type = 10
	Type_TYPE_SERIAL    Type = 11
	Type_TYPE_BIGSERIAL Type = 12
	Type_TYPE_JSON      Type = 13
	Type_TYPE_DOUBLE    Type = 14
	Type_TYPE_REAL      Type = 15
	Type_TYPE_TIME      Type = 16
	Type_TYPE_INTERVAL  Type = 17
	Type_TYPE_BYTEA     Type = 18 // Binary data
	Type_TYPE_INET      Type = 19 // IP addresses
	// Less common types
	Type_TYPE_DECIMAL     Type = 20
	Type_TYPE_SMALLINT    Type = 21
	Type_TYPE_SMALLSERIAL Type = 22
	Type_TYPE_CHAR        Type = 23
	Type_TYPE_MONEY       Type = 24
	Type_TYPE_ENUM        Type = 25
	Type_TYPE_BIT         Type = 26
	Type_TYPE_BIT_VARYING Type = 27
	Type_TYPE_CIDR        Type = 28
	Type_TYPE_MACADDR     Type = 29
	// Specialized types
	Type_TYPE_TSVECTOR  Type = 30 // Full text search
	Type_TYPE_TSQUERY   Type = 31
	Type_TYPE_INT4RANGE Type = 32
	Type_TYPE_INT8RANGE Type = 33
	Type_TYPE_NUMRANGE  Type = 34
	Type_TYPE_TSRANGE   Type = 35
	Type_TYPE_TSTZRANGE Type = 36
	Type_TYPE_DATERANGE Type = 37
	// Geometric types
	Type_TYPE_POINT   Type = 38
	Type_TYPE_LINE    Type = 39
	Type_TYPE_LSEG    Type = 40
	Type_TYPE_BOX     Type = 41
	Type_TYPE_PATH    Type = 42
	Type_TYPE_POLYGON Type = 43
	Type_TYPE_CIRCLE  Type = 44
)

// Enum value maps for Type.
var (
	Type_name = map[int32]string{
		0:  "TYPE_TEXT",
		1:  "TYPE_INTEGER",
		2:  "TYPE_BIGINT",
		3:  "TYPE_BOOLEAN",
		4:  "TYPE_TIMESTAMP",
		5:  "TYPE_TIMESTAMPTZ",
		6:  "TYPE_UUID",
		7:  "TYPE_JSONB",
		8:  "TYPE_VARCHAR",
		9:  "TYPE_NUMERIC",
		10: "TYPE_DATE",
		11: "TYPE_SERIAL",
		12: "TYPE_BIGSERIAL",
		13: "TYPE_JSON",
		14: "TYPE_DOUBLE",
		15: "TYPE_REAL",
		16: "TYPE_TIME",
		17: "TYPE_INTERVAL",
		18: "TYPE_BYTEA",
		19: "TYPE_INET",
		20: "TYPE_DECIMAL",
		21: "TYPE_SMALLINT",
		22: "TYPE_SMALLSERIAL",
		23: "TYPE_CHAR",
		24: "TYPE_MONEY",
		25: "TYPE_ENUM",
		26: "TYPE_BIT",
		27: "TYPE_BIT_VARYING",
		28: "TYPE_CIDR",
		29: "TYPE_MACADDR",
		30: "TYPE_TSVECTOR",
		31: "TYPE_TSQUERY",
		32: "TYPE_INT4RANGE",
		33: "TYPE_INT8RANGE",
		34: "TYPE_NUMRANGE",
		35: "TYPE_TSRANGE",
		36: "TYPE_TSTZRANGE",
		37: "TYPE_DATERANGE",
		38: "TYPE_POINT",
		39: "TYPE_LINE",
		40: "TYPE_LSEG",
		41: "TYPE_BOX",
		42: "TYPE_PATH",
		43: "TYPE_POLYGON",
		44: "TYPE_CIRCLE",
	}
	Type_value = map[string]int32{
		"TYPE_TEXT":        0,
		"TYPE_INTEGER":     1,
		"TYPE_BIGINT":      2,
		"TYPE_BOOLEAN":     3,
		"TYPE_TIMESTAMP":   4,
		"TYPE_TIMESTAMPTZ": 5,
		"TYPE_UUID":        6,
		"TYPE_JSONB":       7,
		"TYPE_VARCHAR":     8,
		"TYPE_NUMERIC":     9,
		"TYPE_DATE":        10,
		"TYPE_SERIAL":      11,
		"TYPE_BIGSERIAL":   12,
		"TYPE_JSON":        13,
		"TYPE_DOUBLE":      14,
		"TYPE_REAL":        15,
		"TYPE_TIME":        16,
		"TYPE_INTERVAL":    17,
		"TYPE_BYTEA":       18,
		"TYPE_INET":        19,
		"TYPE_DECIMAL":     20,
		"TYPE_SMALLINT":    21,
		"TYPE_SMALLSERIAL": 22,
		"TYPE_CHAR":        23,
		"TYPE_MONEY":       24,
		"TYPE_ENUM":        25,
		"TYPE_BIT":         26,
		"TYPE_BIT_VARYING": 27,
		"TYPE_CIDR":        28,
		"TYPE_MACADDR":     29,
		"TYPE_TSVECTOR":    30,
		"TYPE_TSQUERY":     31,
		"TYPE_INT4RANGE":   32,
		"TYPE_INT8RANGE":   33,
		"TYPE_NUMRANGE":    34,
		"TYPE_TSRANGE":     35,
		"TYPE_TSTZRANGE":   36,
		"TYPE_DATERANGE":   37,
		"TYPE_POINT":       38,
		"TYPE_LINE":        39,
		"TYPE_LSEG":        40,
		"TYPE_BOX":         41,
		"TYPE_PATH":        42,
		"TYPE_POLYGON":     43,
		"TYPE_CIRCLE":      44,
	}
)

func (x Type) Enum() *Type {
	p := new(Type)
	*p = x
	return p
}

func (x Type) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Type) Descriptor() protoreflect.EnumDescriptor {
	return file_postgres_proto_schema_v1_common_proto_enumTypes[1].Descriptor()
}

func (Type) Type() protoreflect.EnumType {
	return &file_postgres_proto_schema_v1_common_proto_enumTypes[1]
}

func (x Type) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Type.Descriptor instead.
func (Type) EnumDescriptor() ([]byte, []int) {
	return file_postgres_proto_schema_v1_common_proto_rawDescGZIP(), []int{1}
}

type ConstraintType int32

const (
	ConstraintType_CONSTRAINT_TYPE_UNSPECIFIED ConstraintType = 0
	ConstraintType_CONSTRAINT_TYPE_PRIMARY_KEY ConstraintType = 1
	ConstraintType_CONSTRAINT_TYPE_NOT_NULL    ConstraintType = 2
	ConstraintType_CONSTRAINT_TYPE_UNIQUE      ConstraintType = 3
	ConstraintType_CONSTRAINT_TYPE_CHECK       ConstraintType = 4
	ConstraintType_CONSTRAINT_TYPE_FOREIGN_KEY ConstraintType = 5
	ConstraintType_CONSTRAINT_TYPE_EXCLUSION   ConstraintType = 6
)

// Enum value maps for ConstraintType.
var (
	ConstraintType_name = map[int32]string{
		0: "CONSTRAINT_TYPE_UNSPECIFIED",
		1: "CONSTRAINT_TYPE_PRIMARY_KEY",
		2: "CONSTRAINT_TYPE_NOT_NULL",
		3: "CONSTRAINT_TYPE_UNIQUE",
		4: "CONSTRAINT_TYPE_CHECK",
		5: "CONSTRAINT_TYPE_FOREIGN_KEY",
		6: "CONSTRAINT_TYPE_EXCLUSION",
	}
	ConstraintType_value = map[string]int32{
		"CONSTRAINT_TYPE_UNSPECIFIED": 0,
		"CONSTRAINT_TYPE_PRIMARY_KEY": 1,
		"CONSTRAINT_TYPE_NOT_NULL":    2,
		"CONSTRAINT_TYPE_UNIQUE":      3,
		"CONSTRAINT_TYPE_CHECK":       4,
		"CONSTRAINT_TYPE_FOREIGN_KEY": 5,
		"CONSTRAINT_TYPE_EXCLUSION":   6,
	}
)

func (x ConstraintType) Enum() *ConstraintType {
	p := new(ConstraintType)
	*p = x
	return p
}

func (x ConstraintType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ConstraintType) Descriptor() protoreflect.EnumDescriptor {
	return file_postgres_proto_schema_v1_common_proto_enumTypes[2].Descriptor()
}

func (ConstraintType) Type() protoreflect.EnumType {
	return &file_postgres_proto_schema_v1_common_proto_enumTypes[2]
}

func (x ConstraintType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ConstraintType.Descriptor instead.
func (ConstraintType) EnumDescriptor() ([]byte, []int) {
	return file_postgres_proto_schema_v1_common_proto_rawDescGZIP(), []int{2}
}

type ReferentialAction int32

const (
	ReferentialAction_REFERENTIAL_ACTION_UNSPECIFIED ReferentialAction = 0
	ReferentialAction_REFERENTIAL_ACTION_RESTRICT    ReferentialAction = 1
	ReferentialAction_REFERENTIAL_ACTION_CASCADE     ReferentialAction = 2
	ReferentialAction_REFERENTIAL_ACTION_SET_NULL    ReferentialAction = 3
	ReferentialAction_REFERENTIAL_ACTION_SET_DEFAULT ReferentialAction = 4
	ReferentialAction_REFERENTIAL_ACTION_NO_ACTION   ReferentialAction = 5
)

// Enum value maps for ReferentialAction.
var (
	ReferentialAction_name = map[int32]string{
		0: "REFERENTIAL_ACTION_UNSPECIFIED",
		1: "REFERENTIAL_ACTION_RESTRICT",
		2: "REFERENTIAL_ACTION_CASCADE",
		3: "REFERENTIAL_ACTION_SET_NULL",
		4: "REFERENTIAL_ACTION_SET_DEFAULT",
		5: "REFERENTIAL_ACTION_NO_ACTION",
	}
	ReferentialAction_value = map[string]int32{
		"REFERENTIAL_ACTION_UNSPECIFIED": 0,
		"REFERENTIAL_ACTION_RESTRICT":    1,
		"REFERENTIAL_ACTION_CASCADE":     2,
		"REFERENTIAL_ACTION_SET_NULL":    3,
		"REFERENTIAL_ACTION_SET_DEFAULT": 4,
		"REFERENTIAL_ACTION_NO_ACTION":   5,
	}
)

func (x ReferentialAction) Enum() *ReferentialAction {
	p := new(ReferentialAction)
	*p = x
	return p
}

func (x ReferentialAction) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ReferentialAction) Descriptor() protoreflect.EnumDescriptor {
	return file_postgres_proto_schema_v1_common_proto_enumTypes[3].Descriptor()
}

func (ReferentialAction) Type() protoreflect.EnumType {
	return &file_postgres_proto_schema_v1_common_proto_enumTypes[3]
}

func (x ReferentialAction) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ReferentialAction.Descriptor instead.
func (ReferentialAction) EnumDescriptor() ([]byte, []int) {
	return file_postgres_proto_schema_v1_common_proto_rawDescGZIP(), []int{3}
}

// Shared constraint messages
type ForeignKeyReference struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ForeignTable  string                 `protobuf:"bytes,1,opt,name=foreign_table,json=foreignTable,proto3" json:"foreign_table,omitempty"`
	ForeignColumn string                 `protobuf:"bytes,2,opt,name=foreign_column,json=foreignColumn,proto3" json:"foreign_column,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ForeignKeyReference) Reset() {
	*x = ForeignKeyReference{}
	mi := &file_postgres_proto_schema_v1_common_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ForeignKeyReference) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ForeignKeyReference) ProtoMessage() {}

func (x *ForeignKeyReference) ProtoReflect() protoreflect.Message {
	mi := &file_postgres_proto_schema_v1_common_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ForeignKeyReference.ProtoReflect.Descriptor instead.
func (*ForeignKeyReference) Descriptor() ([]byte, []int) {
	return file_postgres_proto_schema_v1_common_proto_rawDescGZIP(), []int{0}
}

func (x *ForeignKeyReference) GetForeignTable() string {
	if x != nil {
		return x.ForeignTable
	}
	return ""
}

func (x *ForeignKeyReference) GetForeignColumn() string {
	if x != nil {
		return x.ForeignColumn
	}
	return ""
}

type Constraint struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	Type            ConstraintType         `protobuf:"varint,1,opt,name=type,proto3,enum=postgres_proto_schema.v1.ConstraintType" json:"type,omitempty"`
	CheckExpression string                 `protobuf:"bytes,2,opt,name=check_expression,json=checkExpression,proto3" json:"check_expression,omitempty"`
	ForeignKey      *ForeignKeyReference   `protobuf:"bytes,3,opt,name=foreign_key,json=foreignKey,proto3" json:"foreign_key,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *Constraint) Reset() {
	*x = Constraint{}
	mi := &file_postgres_proto_schema_v1_common_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Constraint) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Constraint) ProtoMessage() {}

func (x *Constraint) ProtoReflect() protoreflect.Message {
	mi := &file_postgres_proto_schema_v1_common_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Constraint.ProtoReflect.Descriptor instead.
func (*Constraint) Descriptor() ([]byte, []int) {
	return file_postgres_proto_schema_v1_common_proto_rawDescGZIP(), []int{1}
}

func (x *Constraint) GetType() ConstraintType {
	if x != nil {
		return x.Type
	}
	return ConstraintType_CONSTRAINT_TYPE_UNSPECIFIED
}

func (x *Constraint) GetCheckExpression() string {
	if x != nil {
		return x.CheckExpression
	}
	return ""
}

func (x *Constraint) GetForeignKey() *ForeignKeyReference {
	if x != nil {
		return x.ForeignKey
	}
	return nil
}

var file_postgres_proto_schema_v1_common_proto_extTypes = []protoimpl.ExtensionInfo{
	{
		ExtendedType:  (*descriptorpb.FieldOptions)(nil),
		ExtensionType: (*FieldConstraints)(nil),
		Field:         1042,
		Name:          "postgres_proto_schema.v1.rules",
		Tag:           "bytes,1042,opt,name=rules",
		Filename:      "postgres_proto_schema/v1/common.proto",
	},
	{
		ExtendedType:  (*descriptorpb.OneofOptions)(nil),
		ExtensionType: (*OneofConstraints)(nil),
		Field:         1042,
		Name:          "postgres_proto_schema.v1.oneof",
		Tag:           "bytes,1042,opt,name=oneof",
		Filename:      "postgres_proto_schema/v1/common.proto",
	},
	{
		ExtendedType:  (*descriptorpb.MessageOptions)(nil),
		ExtensionType: (*MessageConstraints)(nil),
		Field:         1042,
		Name:          "postgres_proto_schema.v1.message",
		Tag:           "bytes,1042,opt,name=message",
		Filename:      "postgres_proto_schema/v1/common.proto",
	},
}

// Extension fields to descriptorpb.FieldOptions.
var (
	// optional buf.validate.FieldConstraints rules = 1042;
	E_Rules = &file_postgres_proto_schema_v1_common_proto_extTypes[0] // This is the standard field number for validate rules
)

// Extension fields to descriptorpb.OneofOptions.
var (
	// optional buf.validate.OneofConstraints oneof = 1042;
	E_Oneof = &file_postgres_proto_schema_v1_common_proto_extTypes[1]
)

// Extension fields to descriptorpb.MessageOptions.
var (
	// optional buf.validate.MessageConstraints message = 1042;
	E_Message = &file_postgres_proto_schema_v1_common_proto_extTypes[2]
)

var File_postgres_proto_schema_v1_common_proto protoreflect.FileDescriptor

var file_postgres_proto_schema_v1_common_proto_rawDesc = []byte{
	0x0a, 0x25, 0x70, 0x6f, 0x73, 0x74, 0x67, 0x72, 0x65, 0x73, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x5f, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x18, 0x70, 0x6f, 0x73, 0x74, 0x67, 0x72, 0x65,
	0x73, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x5f, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x76,
	0x31, 0x1a, 0x1b, 0x62, 0x75, 0x66, 0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2f,
	0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x20,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f,
	0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x6f, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x22, 0x73, 0x0a, 0x13, 0x46, 0x6f, 0x72, 0x65, 0x69, 0x67, 0x6e, 0x4b, 0x65, 0x79, 0x52, 0x65,
	0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x2c, 0x0a, 0x0d, 0x66, 0x6f, 0x72, 0x65, 0x69,
	0x67, 0x6e, 0x5f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07,
	0xba, 0x48, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x0c, 0x66, 0x6f, 0x72, 0x65, 0x69, 0x67, 0x6e,
	0x54, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x2e, 0x0a, 0x0e, 0x66, 0x6f, 0x72, 0x65, 0x69, 0x67, 0x6e,
	0x5f, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xba,
	0x48, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x0d, 0x66, 0x6f, 0x72, 0x65, 0x69, 0x67, 0x6e, 0x43,
	0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x22, 0xcf, 0x01, 0x0a, 0x0a, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72,
	0x61, 0x69, 0x6e, 0x74, 0x12, 0x46, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x28, 0x2e, 0x70, 0x6f, 0x73, 0x74, 0x67, 0x72, 0x65, 0x73, 0x5f, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x5f, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f,
	0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x42, 0x08, 0xba, 0x48,
	0x05, 0x82, 0x01, 0x02, 0x10, 0x01, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x29, 0x0a, 0x10,
	0x63, 0x68, 0x65, 0x63, 0x6b, 0x5f, 0x65, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x45, 0x78, 0x70,
	0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x4e, 0x0a, 0x0b, 0x66, 0x6f, 0x72, 0x65, 0x69,
	0x67, 0x6e, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x70,
	0x6f, 0x73, 0x74, 0x67, 0x72, 0x65, 0x73, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x5f, 0x73, 0x63,
	0x68, 0x65, 0x6d, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x6f, 0x72, 0x65, 0x69, 0x67, 0x6e, 0x4b,
	0x65, 0x79, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x0a, 0x66, 0x6f, 0x72,
	0x65, 0x69, 0x67, 0x6e, 0x4b, 0x65, 0x79, 0x2a, 0xfe, 0x05, 0x0a, 0x08, 0x50, 0x6c, 0x61, 0x74,
	0x66, 0x6f, 0x72, 0x6d, 0x12, 0x13, 0x0a, 0x0f, 0x50, 0x4c, 0x41, 0x54, 0x46, 0x4f, 0x52, 0x4d,
	0x5f, 0x4c, 0x41, 0x54, 0x45, 0x53, 0x54, 0x10, 0x00, 0x12, 0x10, 0x0a, 0x0c, 0x50, 0x4c, 0x41,
	0x54, 0x46, 0x4f, 0x52, 0x4d, 0x5f, 0x52, 0x44, 0x53, 0x10, 0x01, 0x12, 0x13, 0x0a, 0x0f, 0x50,
	0x4c, 0x41, 0x54, 0x46, 0x4f, 0x52, 0x4d, 0x5f, 0x41, 0x55, 0x52, 0x4f, 0x52, 0x41, 0x10, 0x02,
	0x12, 0x16, 0x0a, 0x12, 0x50, 0x4c, 0x41, 0x54, 0x46, 0x4f, 0x52, 0x4d, 0x5f, 0x43, 0x4c, 0x4f,
	0x55, 0x44, 0x5f, 0x53, 0x51, 0x4c, 0x10, 0x03, 0x12, 0x12, 0x0a, 0x0e, 0x50, 0x4c, 0x41, 0x54,
	0x46, 0x4f, 0x52, 0x4d, 0x5f, 0x41, 0x5a, 0x55, 0x52, 0x45, 0x10, 0x04, 0x12, 0x15, 0x0a, 0x11,
	0x50, 0x4c, 0x41, 0x54, 0x46, 0x4f, 0x52, 0x4d, 0x5f, 0x41, 0x50, 0x53, 0x41, 0x52, 0x41, 0x44,
	0x42, 0x10, 0x05, 0x12, 0x13, 0x0a, 0x0f, 0x50, 0x4c, 0x41, 0x54, 0x46, 0x4f, 0x52, 0x4d, 0x5f,
	0x48, 0x45, 0x52, 0x4f, 0x4b, 0x55, 0x10, 0x06, 0x12, 0x19, 0x0a, 0x15, 0x50, 0x4c, 0x41, 0x54,
	0x46, 0x4f, 0x52, 0x4d, 0x5f, 0x44, 0x49, 0x47, 0x49, 0x54, 0x41, 0x4c, 0x4f, 0x43, 0x45, 0x41,
	0x4e, 0x10, 0x07, 0x12, 0x15, 0x0a, 0x11, 0x50, 0x4c, 0x41, 0x54, 0x46, 0x4f, 0x52, 0x4d, 0x5f,
	0x49, 0x42, 0x4d, 0x43, 0x4c, 0x4f, 0x55, 0x44, 0x10, 0x08, 0x12, 0x19, 0x0a, 0x15, 0x50, 0x4c,
	0x41, 0x54, 0x46, 0x4f, 0x52, 0x4d, 0x5f, 0x41, 0x4c, 0x49, 0x42, 0x41, 0x42, 0x41, 0x43, 0x4c,
	0x4f, 0x55, 0x44, 0x10, 0x09, 0x12, 0x18, 0x0a, 0x14, 0x50, 0x4c, 0x41, 0x54, 0x46, 0x4f, 0x52,
	0x4d, 0x5f, 0x45, 0x4c, 0x45, 0x50, 0x48, 0x41, 0x4e, 0x54, 0x53, 0x51, 0x4c, 0x10, 0x0a, 0x12,
	0x15, 0x0a, 0x11, 0x50, 0x4c, 0x41, 0x54, 0x46, 0x4f, 0x52, 0x4d, 0x5f, 0x53, 0x55, 0x50, 0x41,
	0x42, 0x41, 0x53, 0x45, 0x10, 0x0b, 0x12, 0x17, 0x0a, 0x13, 0x50, 0x4c, 0x41, 0x54, 0x46, 0x4f,
	0x52, 0x4d, 0x5f, 0x43, 0x49, 0x54, 0x55, 0x53, 0x43, 0x4c, 0x4f, 0x55, 0x44, 0x10, 0x0c, 0x12,
	0x16, 0x0a, 0x12, 0x50, 0x4c, 0x41, 0x54, 0x46, 0x4f, 0x52, 0x4d, 0x5f, 0x53, 0x43, 0x41, 0x4c,
	0x45, 0x47, 0x52, 0x49, 0x44, 0x10, 0x0d, 0x12, 0x12, 0x0a, 0x0e, 0x50, 0x4c, 0x41, 0x54, 0x46,
	0x4f, 0x52, 0x4d, 0x5f, 0x41, 0x49, 0x56, 0x45, 0x4e, 0x10, 0x0e, 0x12, 0x19, 0x0a, 0x15, 0x50,
	0x4c, 0x41, 0x54, 0x46, 0x4f, 0x52, 0x4d, 0x5f, 0x45, 0x4e, 0x54, 0x45, 0x52, 0x50, 0x52, 0x49,
	0x53, 0x45, 0x44, 0x42, 0x10, 0x0f, 0x12, 0x16, 0x0a, 0x12, 0x50, 0x4c, 0x41, 0x54, 0x46, 0x4f,
	0x52, 0x4d, 0x5f, 0x47, 0x52, 0x45, 0x45, 0x4e, 0x50, 0x4c, 0x55, 0x4d, 0x10, 0x10, 0x12, 0x18,
	0x0a, 0x14, 0x50, 0x4c, 0x41, 0x54, 0x46, 0x4f, 0x52, 0x4d, 0x5f, 0x54, 0x49, 0x4d, 0x45, 0x53,
	0x43, 0x41, 0x4c, 0x45, 0x44, 0x42, 0x10, 0x11, 0x12, 0x15, 0x0a, 0x11, 0x50, 0x4c, 0x41, 0x54,
	0x46, 0x4f, 0x52, 0x4d, 0x5f, 0x59, 0x55, 0x47, 0x41, 0x42, 0x59, 0x54, 0x45, 0x10, 0x12, 0x12,
	0x14, 0x0a, 0x10, 0x50, 0x4c, 0x41, 0x54, 0x46, 0x4f, 0x52, 0x4d, 0x5f, 0x43, 0x52, 0x41, 0x54,
	0x45, 0x44, 0x42, 0x10, 0x13, 0x12, 0x17, 0x0a, 0x13, 0x50, 0x4c, 0x41, 0x54, 0x46, 0x4f, 0x52,
	0x4d, 0x5f, 0x48, 0x59, 0x50, 0x45, 0x52, 0x53, 0x43, 0x41, 0x4c, 0x45, 0x10, 0x14, 0x12, 0x10,
	0x0a, 0x0c, 0x50, 0x4c, 0x41, 0x54, 0x46, 0x4f, 0x52, 0x4d, 0x5f, 0x45, 0x44, 0x42, 0x10, 0x15,
	0x12, 0x0f, 0x0a, 0x0b, 0x50, 0x4c, 0x41, 0x54, 0x46, 0x4f, 0x52, 0x4d, 0x5f, 0x58, 0x4c, 0x10,
	0x16, 0x12, 0x13, 0x0a, 0x0f, 0x50, 0x4c, 0x41, 0x54, 0x46, 0x4f, 0x52, 0x4d, 0x5f, 0x53, 0x54,
	0x4f, 0x4c, 0x4f, 0x4e, 0x10, 0x17, 0x12, 0x14, 0x0a, 0x10, 0x50, 0x4c, 0x41, 0x54, 0x46, 0x4f,
	0x52, 0x4d, 0x5f, 0x50, 0x41, 0x54, 0x52, 0x4f, 0x4e, 0x49, 0x10, 0x18, 0x12, 0x16, 0x0a, 0x12,
	0x50, 0x4c, 0x41, 0x54, 0x46, 0x4f, 0x52, 0x4d, 0x5f, 0x43, 0x4c, 0x55, 0x53, 0x54, 0x45, 0x52,
	0x44, 0x42, 0x10, 0x19, 0x12, 0x18, 0x0a, 0x14, 0x50, 0x4c, 0x41, 0x54, 0x46, 0x4f, 0x52, 0x4d,
	0x5f, 0x50, 0x4f, 0x53, 0x54, 0x47, 0x52, 0x45, 0x53, 0x50, 0x52, 0x4f, 0x10, 0x1a, 0x12, 0x14,
	0x0a, 0x10, 0x50, 0x4c, 0x41, 0x54, 0x46, 0x4f, 0x52, 0x4d, 0x5f, 0x50, 0x45, 0x52, 0x43, 0x4f,
	0x4e, 0x41, 0x10, 0x1b, 0x12, 0x16, 0x0a, 0x12, 0x50, 0x4c, 0x41, 0x54, 0x46, 0x4f, 0x52, 0x4d,
	0x5f, 0x42, 0x49, 0x47, 0x41, 0x4e, 0x49, 0x4d, 0x41, 0x4c, 0x10, 0x1c, 0x12, 0x11, 0x0a, 0x0d,
	0x50, 0x4c, 0x41, 0x54, 0x46, 0x4f, 0x52, 0x4d, 0x5f, 0x4e, 0x45, 0x4f, 0x4e, 0x10, 0x1d, 0x12,
	0x14, 0x0a, 0x10, 0x50, 0x4c, 0x41, 0x54, 0x46, 0x4f, 0x52, 0x4d, 0x5f, 0x43, 0x52, 0x55, 0x4e,
	0x43, 0x48, 0x59, 0x10, 0x1e, 0x12, 0x0f, 0x0a, 0x0b, 0x50, 0x4c, 0x41, 0x54, 0x46, 0x4f, 0x52,
	0x4d, 0x5f, 0x31, 0x35, 0x10, 0x1f, 0x12, 0x0f, 0x0a, 0x0b, 0x50, 0x4c, 0x41, 0x54, 0x46, 0x4f,
	0x52, 0x4d, 0x5f, 0x31, 0x36, 0x10, 0x20, 0x12, 0x0f, 0x0a, 0x0b, 0x50, 0x4c, 0x41, 0x54, 0x46,
	0x4f, 0x52, 0x4d, 0x5f, 0x31, 0x37, 0x10, 0x21, 0x2a, 0x91, 0x06, 0x0a, 0x04, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x0d, 0x0a, 0x09, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x54, 0x45, 0x58, 0x54, 0x10, 0x00,
	0x12, 0x10, 0x0a, 0x0c, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x49, 0x4e, 0x54, 0x45, 0x47, 0x45, 0x52,
	0x10, 0x01, 0x12, 0x0f, 0x0a, 0x0b, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x42, 0x49, 0x47, 0x49, 0x4e,
	0x54, 0x10, 0x02, 0x12, 0x10, 0x0a, 0x0c, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x42, 0x4f, 0x4f, 0x4c,
	0x45, 0x41, 0x4e, 0x10, 0x03, 0x12, 0x12, 0x0a, 0x0e, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x54, 0x49,
	0x4d, 0x45, 0x53, 0x54, 0x41, 0x4d, 0x50, 0x10, 0x04, 0x12, 0x14, 0x0a, 0x10, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x54, 0x49, 0x4d, 0x45, 0x53, 0x54, 0x41, 0x4d, 0x50, 0x54, 0x5a, 0x10, 0x05, 0x12,
	0x0d, 0x0a, 0x09, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x55, 0x49, 0x44, 0x10, 0x06, 0x12, 0x0e,
	0x0a, 0x0a, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4a, 0x53, 0x4f, 0x4e, 0x42, 0x10, 0x07, 0x12, 0x10,
	0x0a, 0x0c, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x56, 0x41, 0x52, 0x43, 0x48, 0x41, 0x52, 0x10, 0x08,
	0x12, 0x10, 0x0a, 0x0c, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4e, 0x55, 0x4d, 0x45, 0x52, 0x49, 0x43,
	0x10, 0x09, 0x12, 0x0d, 0x0a, 0x09, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x44, 0x41, 0x54, 0x45, 0x10,
	0x0a, 0x12, 0x0f, 0x0a, 0x0b, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x45, 0x52, 0x49, 0x41, 0x4c,
	0x10, 0x0b, 0x12, 0x12, 0x0a, 0x0e, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x42, 0x49, 0x47, 0x53, 0x45,
	0x52, 0x49, 0x41, 0x4c, 0x10, 0x0c, 0x12, 0x0d, 0x0a, 0x09, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4a,
	0x53, 0x4f, 0x4e, 0x10, 0x0d, 0x12, 0x0f, 0x0a, 0x0b, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x44, 0x4f,
	0x55, 0x42, 0x4c, 0x45, 0x10, 0x0e, 0x12, 0x0d, 0x0a, 0x09, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x52,
	0x45, 0x41, 0x4c, 0x10, 0x0f, 0x12, 0x0d, 0x0a, 0x09, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x54, 0x49,
	0x4d, 0x45, 0x10, 0x10, 0x12, 0x11, 0x0a, 0x0d, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x49, 0x4e, 0x54,
	0x45, 0x52, 0x56, 0x41, 0x4c, 0x10, 0x11, 0x12, 0x0e, 0x0a, 0x0a, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x42, 0x59, 0x54, 0x45, 0x41, 0x10, 0x12, 0x12, 0x0d, 0x0a, 0x09, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x49, 0x4e, 0x45, 0x54, 0x10, 0x13, 0x12, 0x10, 0x0a, 0x0c, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x44,
	0x45, 0x43, 0x49, 0x4d, 0x41, 0x4c, 0x10, 0x14, 0x12, 0x11, 0x0a, 0x0d, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x53, 0x4d, 0x41, 0x4c, 0x4c, 0x49, 0x4e, 0x54, 0x10, 0x15, 0x12, 0x14, 0x0a, 0x10, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x53, 0x4d, 0x41, 0x4c, 0x4c, 0x53, 0x45, 0x52, 0x49, 0x41, 0x4c, 0x10,
	0x16, 0x12, 0x0d, 0x0a, 0x09, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x43, 0x48, 0x41, 0x52, 0x10, 0x17,
	0x12, 0x0e, 0x0a, 0x0a, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4d, 0x4f, 0x4e, 0x45, 0x59, 0x10, 0x18,
	0x12, 0x0d, 0x0a, 0x09, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x45, 0x4e, 0x55, 0x4d, 0x10, 0x19, 0x12,
	0x0c, 0x0a, 0x08, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x42, 0x49, 0x54, 0x10, 0x1a, 0x12, 0x14, 0x0a,
	0x10, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x42, 0x49, 0x54, 0x5f, 0x56, 0x41, 0x52, 0x59, 0x49, 0x4e,
	0x47, 0x10, 0x1b, 0x12, 0x0d, 0x0a, 0x09, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x43, 0x49, 0x44, 0x52,
	0x10, 0x1c, 0x12, 0x10, 0x0a, 0x0c, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4d, 0x41, 0x43, 0x41, 0x44,
	0x44, 0x52, 0x10, 0x1d, 0x12, 0x11, 0x0a, 0x0d, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x54, 0x53, 0x56,
	0x45, 0x43, 0x54, 0x4f, 0x52, 0x10, 0x1e, 0x12, 0x10, 0x0a, 0x0c, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x54, 0x53, 0x51, 0x55, 0x45, 0x52, 0x59, 0x10, 0x1f, 0x12, 0x12, 0x0a, 0x0e, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x49, 0x4e, 0x54, 0x34, 0x52, 0x41, 0x4e, 0x47, 0x45, 0x10, 0x20, 0x12, 0x12, 0x0a,
	0x0e, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x49, 0x4e, 0x54, 0x38, 0x52, 0x41, 0x4e, 0x47, 0x45, 0x10,
	0x21, 0x12, 0x11, 0x0a, 0x0d, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4e, 0x55, 0x4d, 0x52, 0x41, 0x4e,
	0x47, 0x45, 0x10, 0x22, 0x12, 0x10, 0x0a, 0x0c, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x54, 0x53, 0x52,
	0x41, 0x4e, 0x47, 0x45, 0x10, 0x23, 0x12, 0x12, 0x0a, 0x0e, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x54,
	0x53, 0x54, 0x5a, 0x52, 0x41, 0x4e, 0x47, 0x45, 0x10, 0x24, 0x12, 0x12, 0x0a, 0x0e, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x44, 0x41, 0x54, 0x45, 0x52, 0x41, 0x4e, 0x47, 0x45, 0x10, 0x25, 0x12, 0x0e,
	0x0a, 0x0a, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x50, 0x4f, 0x49, 0x4e, 0x54, 0x10, 0x26, 0x12, 0x0d,
	0x0a, 0x09, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4c, 0x49, 0x4e, 0x45, 0x10, 0x27, 0x12, 0x0d, 0x0a,
	0x09, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4c, 0x53, 0x45, 0x47, 0x10, 0x28, 0x12, 0x0c, 0x0a, 0x08,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x42, 0x4f, 0x58, 0x10, 0x29, 0x12, 0x0d, 0x0a, 0x09, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x50, 0x41, 0x54, 0x48, 0x10, 0x2a, 0x12, 0x10, 0x0a, 0x0c, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x50, 0x4f, 0x4c, 0x59, 0x47, 0x4f, 0x4e, 0x10, 0x2b, 0x12, 0x0f, 0x0a, 0x0b, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x43, 0x49, 0x52, 0x43, 0x4c, 0x45, 0x10, 0x2c, 0x2a, 0xe7, 0x01, 0x0a,
	0x0e, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x1f, 0x0a, 0x1b, 0x43, 0x4f, 0x4e, 0x53, 0x54, 0x52, 0x41, 0x49, 0x4e, 0x54, 0x5f, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00,
	0x12, 0x1f, 0x0a, 0x1b, 0x43, 0x4f, 0x4e, 0x53, 0x54, 0x52, 0x41, 0x49, 0x4e, 0x54, 0x5f, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x50, 0x52, 0x49, 0x4d, 0x41, 0x52, 0x59, 0x5f, 0x4b, 0x45, 0x59, 0x10,
	0x01, 0x12, 0x1c, 0x0a, 0x18, 0x43, 0x4f, 0x4e, 0x53, 0x54, 0x52, 0x41, 0x49, 0x4e, 0x54, 0x5f,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x4e, 0x55, 0x4c, 0x4c, 0x10, 0x02, 0x12,
	0x1a, 0x0a, 0x16, 0x43, 0x4f, 0x4e, 0x53, 0x54, 0x52, 0x41, 0x49, 0x4e, 0x54, 0x5f, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x55, 0x4e, 0x49, 0x51, 0x55, 0x45, 0x10, 0x03, 0x12, 0x19, 0x0a, 0x15, 0x43,
	0x4f, 0x4e, 0x53, 0x54, 0x52, 0x41, 0x49, 0x4e, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x43,
	0x48, 0x45, 0x43, 0x4b, 0x10, 0x04, 0x12, 0x1f, 0x0a, 0x1b, 0x43, 0x4f, 0x4e, 0x53, 0x54, 0x52,
	0x41, 0x49, 0x4e, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x46, 0x4f, 0x52, 0x45, 0x49, 0x47,
	0x4e, 0x5f, 0x4b, 0x45, 0x59, 0x10, 0x05, 0x12, 0x1d, 0x0a, 0x19, 0x43, 0x4f, 0x4e, 0x53, 0x54,
	0x52, 0x41, 0x49, 0x4e, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x45, 0x58, 0x43, 0x4c, 0x55,
	0x53, 0x49, 0x4f, 0x4e, 0x10, 0x06, 0x2a, 0xdf, 0x01, 0x0a, 0x11, 0x52, 0x65, 0x66, 0x65, 0x72,
	0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x22, 0x0a, 0x1e,
	0x52, 0x45, 0x46, 0x45, 0x52, 0x45, 0x4e, 0x54, 0x49, 0x41, 0x4c, 0x5f, 0x41, 0x43, 0x54, 0x49,
	0x4f, 0x4e, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00,
	0x12, 0x1f, 0x0a, 0x1b, 0x52, 0x45, 0x46, 0x45, 0x52, 0x45, 0x4e, 0x54, 0x49, 0x41, 0x4c, 0x5f,
	0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x52, 0x45, 0x53, 0x54, 0x52, 0x49, 0x43, 0x54, 0x10,
	0x01, 0x12, 0x1e, 0x0a, 0x1a, 0x52, 0x45, 0x46, 0x45, 0x52, 0x45, 0x4e, 0x54, 0x49, 0x41, 0x4c,
	0x5f, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x43, 0x41, 0x53, 0x43, 0x41, 0x44, 0x45, 0x10,
	0x02, 0x12, 0x1f, 0x0a, 0x1b, 0x52, 0x45, 0x46, 0x45, 0x52, 0x45, 0x4e, 0x54, 0x49, 0x41, 0x4c,
	0x5f, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x45, 0x54, 0x5f, 0x4e, 0x55, 0x4c, 0x4c,
	0x10, 0x03, 0x12, 0x22, 0x0a, 0x1e, 0x52, 0x45, 0x46, 0x45, 0x52, 0x45, 0x4e, 0x54, 0x49, 0x41,
	0x4c, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x45, 0x54, 0x5f, 0x44, 0x45, 0x46,
	0x41, 0x55, 0x4c, 0x54, 0x10, 0x04, 0x12, 0x20, 0x0a, 0x1c, 0x52, 0x45, 0x46, 0x45, 0x52, 0x45,
	0x4e, 0x54, 0x49, 0x41, 0x4c, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x4e, 0x4f, 0x5f,
	0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x05, 0x3a, 0x54, 0x0a, 0x05, 0x72, 0x75, 0x6c, 0x65,
	0x73, 0x12, 0x1d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x18, 0x92, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x62, 0x75, 0x66, 0x2e, 0x76, 0x61,
	0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x43, 0x6f, 0x6e, 0x73,
	0x74, 0x72, 0x61, 0x69, 0x6e, 0x74, 0x73, 0x52, 0x05, 0x72, 0x75, 0x6c, 0x65, 0x73, 0x3a, 0x54,
	0x0a, 0x05, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x12, 0x1d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x4f, 0x6e, 0x65, 0x6f, 0x66, 0x4f,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x92, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e,
	0x62, 0x75, 0x66, 0x2e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2e, 0x4f, 0x6e, 0x65,
	0x6f, 0x66, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x74, 0x73, 0x52, 0x05, 0x6f,
	0x6e, 0x65, 0x6f, 0x66, 0x3a, 0x5c, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12,
	0x1f, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x18, 0x92, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x62, 0x75, 0x66, 0x2e, 0x76, 0x61,
	0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x43, 0x6f,
	0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x74, 0x73, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x42, 0xbe, 0x01, 0x0a, 0x1c, 0x63, 0x6f, 0x6d, 0x2e, 0x70, 0x6f, 0x73, 0x74, 0x67,
	0x72, 0x65, 0x73, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x5f, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61,
	0x2e, 0x76, 0x31, 0x42, 0x0b, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x74, 0x6f,
	0x50, 0x01, 0x5a, 0x18, 0x70, 0x6f, 0x73, 0x74, 0x67, 0x72, 0x65, 0x73, 0x5f, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x5f, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2f, 0x76, 0x31, 0xa2, 0x02, 0x03, 0x50,
	0x58, 0x58, 0xaa, 0x02, 0x16, 0x50, 0x6f, 0x73, 0x74, 0x67, 0x72, 0x65, 0x73, 0x50, 0x72, 0x6f,
	0x74, 0x6f, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x56, 0x31, 0xca, 0x02, 0x16, 0x50, 0x6f,
	0x73, 0x74, 0x67, 0x72, 0x65, 0x73, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x53, 0x63, 0x68, 0x65, 0x6d,
	0x61, 0x5c, 0x56, 0x31, 0xe2, 0x02, 0x22, 0x50, 0x6f, 0x73, 0x74, 0x67, 0x72, 0x65, 0x73, 0x50,
	0x72, 0x6f, 0x74, 0x6f, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x5c, 0x56, 0x31, 0x5c, 0x47, 0x50,
	0x42, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0xea, 0x02, 0x17, 0x50, 0x6f, 0x73, 0x74,
	0x67, 0x72, 0x65, 0x73, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x3a,
	0x3a, 0x56, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_postgres_proto_schema_v1_common_proto_rawDescOnce sync.Once
	file_postgres_proto_schema_v1_common_proto_rawDescData = file_postgres_proto_schema_v1_common_proto_rawDesc
)

func file_postgres_proto_schema_v1_common_proto_rawDescGZIP() []byte {
	file_postgres_proto_schema_v1_common_proto_rawDescOnce.Do(func() {
		file_postgres_proto_schema_v1_common_proto_rawDescData = protoimpl.X.CompressGZIP(file_postgres_proto_schema_v1_common_proto_rawDescData)
	})
	return file_postgres_proto_schema_v1_common_proto_rawDescData
}

var file_postgres_proto_schema_v1_common_proto_enumTypes = make([]protoimpl.EnumInfo, 4)
var file_postgres_proto_schema_v1_common_proto_msgTypes = make([]protoimpl.MessageInfo, 2)
var file_postgres_proto_schema_v1_common_proto_goTypes = []any{
	(Platform)(0),                       // 0: postgres_proto_schema.v1.Platform
	(Type)(0),                           // 1: postgres_proto_schema.v1.Type
	(ConstraintType)(0),                 // 2: postgres_proto_schema.v1.ConstraintType
	(ReferentialAction)(0),              // 3: postgres_proto_schema.v1.ReferentialAction
	(*ForeignKeyReference)(nil),         // 4: postgres_proto_schema.v1.ForeignKeyReference
	(*Constraint)(nil),                  // 5: postgres_proto_schema.v1.Constraint
	(*descriptorpb.FieldOptions)(nil),   // 6: google.protobuf.FieldOptions
	(*descriptorpb.OneofOptions)(nil),   // 7: google.protobuf.OneofOptions
	(*descriptorpb.MessageOptions)(nil), // 8: google.protobuf.MessageOptions
	(*FieldConstraints)(nil),            // 9: buf.validate.FieldConstraints
	(*OneofConstraints)(nil),            // 10: buf.validate.OneofConstraints
	(*MessageConstraints)(nil),          // 11: buf.validate.MessageConstraints
}
var file_postgres_proto_schema_v1_common_proto_depIdxs = []int32{
	2,  // 0: postgres_proto_schema.v1.Constraint.type:type_name -> postgres_proto_schema.v1.ConstraintType
	4,  // 1: postgres_proto_schema.v1.Constraint.foreign_key:type_name -> postgres_proto_schema.v1.ForeignKeyReference
	6,  // 2: postgres_proto_schema.v1.rules:extendee -> google.protobuf.FieldOptions
	7,  // 3: postgres_proto_schema.v1.oneof:extendee -> google.protobuf.OneofOptions
	8,  // 4: postgres_proto_schema.v1.message:extendee -> google.protobuf.MessageOptions
	9,  // 5: postgres_proto_schema.v1.rules:type_name -> buf.validate.FieldConstraints
	10, // 6: postgres_proto_schema.v1.oneof:type_name -> buf.validate.OneofConstraints
	11, // 7: postgres_proto_schema.v1.message:type_name -> buf.validate.MessageConstraints
	8,  // [8:8] is the sub-list for method output_type
	8,  // [8:8] is the sub-list for method input_type
	5,  // [5:8] is the sub-list for extension type_name
	2,  // [2:5] is the sub-list for extension extendee
	0,  // [0:2] is the sub-list for field type_name
}

func init() { file_postgres_proto_schema_v1_common_proto_init() }
func file_postgres_proto_schema_v1_common_proto_init() {
	if File_postgres_proto_schema_v1_common_proto != nil {
		return
	}
	file_buf_validate_validate_proto_init()
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_postgres_proto_schema_v1_common_proto_rawDesc,
			NumEnums:      4,
			NumMessages:   2,
			NumExtensions: 3,
			NumServices:   0,
		},
		GoTypes:           file_postgres_proto_schema_v1_common_proto_goTypes,
		DependencyIndexes: file_postgres_proto_schema_v1_common_proto_depIdxs,
		EnumInfos:         file_postgres_proto_schema_v1_common_proto_enumTypes,
		MessageInfos:      file_postgres_proto_schema_v1_common_proto_msgTypes,
		ExtensionInfos:    file_postgres_proto_schema_v1_common_proto_extTypes,
	}.Build()
	File_postgres_proto_schema_v1_common_proto = out.File
	file_postgres_proto_schema_v1_common_proto_rawDesc = nil
	file_postgres_proto_schema_v1_common_proto_goTypes = nil
	file_postgres_proto_schema_v1_common_proto_depIdxs = nil
}
