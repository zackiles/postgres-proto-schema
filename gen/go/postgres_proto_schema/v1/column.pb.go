// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.1
// 	protoc        (unknown)
// source: postgres_proto_schema/v1/column.proto

package v1

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	_ "google.golang.org/protobuf/types/descriptorpb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type VarcharOptions struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Length        int32                  `protobuf:"varint,1,opt,name=length,proto3" json:"length,omitempty"`
	Collation     string                 `protobuf:"bytes,2,opt,name=collation,proto3" json:"collation,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *VarcharOptions) Reset() {
	*x = VarcharOptions{}
	mi := &file_postgres_proto_schema_v1_column_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *VarcharOptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VarcharOptions) ProtoMessage() {}

func (x *VarcharOptions) ProtoReflect() protoreflect.Message {
	mi := &file_postgres_proto_schema_v1_column_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VarcharOptions.ProtoReflect.Descriptor instead.
func (*VarcharOptions) Descriptor() ([]byte, []int) {
	return file_postgres_proto_schema_v1_column_proto_rawDescGZIP(), []int{0}
}

func (x *VarcharOptions) GetLength() int32 {
	if x != nil {
		return x.Length
	}
	return 0
}

func (x *VarcharOptions) GetCollation() string {
	if x != nil {
		return x.Collation
	}
	return ""
}

type CharOptions struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Length        int32                  `protobuf:"varint,1,opt,name=length,proto3" json:"length,omitempty"`
	Collation     string                 `protobuf:"bytes,2,opt,name=collation,proto3" json:"collation,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CharOptions) Reset() {
	*x = CharOptions{}
	mi := &file_postgres_proto_schema_v1_column_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CharOptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CharOptions) ProtoMessage() {}

func (x *CharOptions) ProtoReflect() protoreflect.Message {
	mi := &file_postgres_proto_schema_v1_column_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CharOptions.ProtoReflect.Descriptor instead.
func (*CharOptions) Descriptor() ([]byte, []int) {
	return file_postgres_proto_schema_v1_column_proto_rawDescGZIP(), []int{1}
}

func (x *CharOptions) GetLength() int32 {
	if x != nil {
		return x.Length
	}
	return 0
}

func (x *CharOptions) GetCollation() string {
	if x != nil {
		return x.Collation
	}
	return ""
}

type NumericOptions struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Precision     int32                  `protobuf:"varint,1,opt,name=precision,proto3" json:"precision,omitempty"`
	Scale         int32                  `protobuf:"varint,2,opt,name=scale,proto3" json:"scale,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *NumericOptions) Reset() {
	*x = NumericOptions{}
	mi := &file_postgres_proto_schema_v1_column_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NumericOptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NumericOptions) ProtoMessage() {}

func (x *NumericOptions) ProtoReflect() protoreflect.Message {
	mi := &file_postgres_proto_schema_v1_column_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NumericOptions.ProtoReflect.Descriptor instead.
func (*NumericOptions) Descriptor() ([]byte, []int) {
	return file_postgres_proto_schema_v1_column_proto_rawDescGZIP(), []int{2}
}

func (x *NumericOptions) GetPrecision() int32 {
	if x != nil {
		return x.Precision
	}
	return 0
}

func (x *NumericOptions) GetScale() int32 {
	if x != nil {
		return x.Scale
	}
	return 0
}

type BitOptions struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Varying       bool                   `protobuf:"varint,1,opt,name=varying,proto3" json:"varying,omitempty"`
	Length        int32                  `protobuf:"varint,2,opt,name=length,proto3" json:"length,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *BitOptions) Reset() {
	*x = BitOptions{}
	mi := &file_postgres_proto_schema_v1_column_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BitOptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BitOptions) ProtoMessage() {}

func (x *BitOptions) ProtoReflect() protoreflect.Message {
	mi := &file_postgres_proto_schema_v1_column_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BitOptions.ProtoReflect.Descriptor instead.
func (*BitOptions) Descriptor() ([]byte, []int) {
	return file_postgres_proto_schema_v1_column_proto_rawDescGZIP(), []int{3}
}

func (x *BitOptions) GetVarying() bool {
	if x != nil {
		return x.Varying
	}
	return false
}

func (x *BitOptions) GetLength() int32 {
	if x != nil {
		return x.Length
	}
	return 0
}

type TimeOptions struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Precision     int32                  `protobuf:"varint,1,opt,name=precision,proto3" json:"precision,omitempty"`
	WithTimeZone  bool                   `protobuf:"varint,2,opt,name=with_time_zone,json=withTimeZone,proto3" json:"with_time_zone,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TimeOptions) Reset() {
	*x = TimeOptions{}
	mi := &file_postgres_proto_schema_v1_column_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TimeOptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TimeOptions) ProtoMessage() {}

func (x *TimeOptions) ProtoReflect() protoreflect.Message {
	mi := &file_postgres_proto_schema_v1_column_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TimeOptions.ProtoReflect.Descriptor instead.
func (*TimeOptions) Descriptor() ([]byte, []int) {
	return file_postgres_proto_schema_v1_column_proto_rawDescGZIP(), []int{4}
}

func (x *TimeOptions) GetPrecision() int32 {
	if x != nil {
		return x.Precision
	}
	return 0
}

func (x *TimeOptions) GetWithTimeZone() bool {
	if x != nil {
		return x.WithTimeZone
	}
	return false
}

type EnumOptions struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Values        []string               `protobuf:"bytes,1,rep,name=values,proto3" json:"values,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *EnumOptions) Reset() {
	*x = EnumOptions{}
	mi := &file_postgres_proto_schema_v1_column_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EnumOptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EnumOptions) ProtoMessage() {}

func (x *EnumOptions) ProtoReflect() protoreflect.Message {
	mi := &file_postgres_proto_schema_v1_column_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EnumOptions.ProtoReflect.Descriptor instead.
func (*EnumOptions) Descriptor() ([]byte, []int) {
	return file_postgres_proto_schema_v1_column_proto_rawDescGZIP(), []int{5}
}

func (x *EnumOptions) GetValues() []string {
	if x != nil {
		return x.Values
	}
	return nil
}

type IntervalOptions struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Fields        string                 `protobuf:"bytes,1,opt,name=fields,proto3" json:"fields,omitempty"`
	Precision     int32                  `protobuf:"varint,2,opt,name=precision,proto3" json:"precision,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *IntervalOptions) Reset() {
	*x = IntervalOptions{}
	mi := &file_postgres_proto_schema_v1_column_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *IntervalOptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IntervalOptions) ProtoMessage() {}

func (x *IntervalOptions) ProtoReflect() protoreflect.Message {
	mi := &file_postgres_proto_schema_v1_column_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IntervalOptions.ProtoReflect.Descriptor instead.
func (*IntervalOptions) Descriptor() ([]byte, []int) {
	return file_postgres_proto_schema_v1_column_proto_rawDescGZIP(), []int{6}
}

func (x *IntervalOptions) GetFields() string {
	if x != nil {
		return x.Fields
	}
	return ""
}

func (x *IntervalOptions) GetPrecision() int32 {
	if x != nil {
		return x.Precision
	}
	return 0
}

type JSONOptions struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Binary        bool                   `protobuf:"varint,1,opt,name=binary,proto3" json:"binary,omitempty"`
	Validation    string                 `protobuf:"bytes,2,opt,name=validation,proto3" json:"validation,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *JSONOptions) Reset() {
	*x = JSONOptions{}
	mi := &file_postgres_proto_schema_v1_column_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *JSONOptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JSONOptions) ProtoMessage() {}

func (x *JSONOptions) ProtoReflect() protoreflect.Message {
	mi := &file_postgres_proto_schema_v1_column_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JSONOptions.ProtoReflect.Descriptor instead.
func (*JSONOptions) Descriptor() ([]byte, []int) {
	return file_postgres_proto_schema_v1_column_proto_rawDescGZIP(), []int{7}
}

func (x *JSONOptions) GetBinary() bool {
	if x != nil {
		return x.Binary
	}
	return false
}

func (x *JSONOptions) GetValidation() string {
	if x != nil {
		return x.Validation
	}
	return ""
}

type GeometricOptions struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Srid          string                 `protobuf:"bytes,1,opt,name=srid,proto3" json:"srid,omitempty"`
	WithZ         bool                   `protobuf:"varint,2,opt,name=with_z,json=withZ,proto3" json:"with_z,omitempty"`
	WithM         bool                   `protobuf:"varint,3,opt,name=with_m,json=withM,proto3" json:"with_m,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GeometricOptions) Reset() {
	*x = GeometricOptions{}
	mi := &file_postgres_proto_schema_v1_column_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GeometricOptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GeometricOptions) ProtoMessage() {}

func (x *GeometricOptions) ProtoReflect() protoreflect.Message {
	mi := &file_postgres_proto_schema_v1_column_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GeometricOptions.ProtoReflect.Descriptor instead.
func (*GeometricOptions) Descriptor() ([]byte, []int) {
	return file_postgres_proto_schema_v1_column_proto_rawDescGZIP(), []int{8}
}

func (x *GeometricOptions) GetSrid() string {
	if x != nil {
		return x.Srid
	}
	return ""
}

func (x *GeometricOptions) GetWithZ() bool {
	if x != nil {
		return x.WithZ
	}
	return false
}

func (x *GeometricOptions) GetWithM() bool {
	if x != nil {
		return x.WithM
	}
	return false
}

type NetworkOptions struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Family        bool                   `protobuf:"varint,1,opt,name=family,proto3" json:"family,omitempty"`
	WithPrefix    bool                   `protobuf:"varint,2,opt,name=with_prefix,json=withPrefix,proto3" json:"with_prefix,omitempty"`
	Macaddr8      bool                   `protobuf:"varint,3,opt,name=macaddr8,proto3" json:"macaddr8,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *NetworkOptions) Reset() {
	*x = NetworkOptions{}
	mi := &file_postgres_proto_schema_v1_column_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NetworkOptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetworkOptions) ProtoMessage() {}

func (x *NetworkOptions) ProtoReflect() protoreflect.Message {
	mi := &file_postgres_proto_schema_v1_column_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetworkOptions.ProtoReflect.Descriptor instead.
func (*NetworkOptions) Descriptor() ([]byte, []int) {
	return file_postgres_proto_schema_v1_column_proto_rawDescGZIP(), []int{9}
}

func (x *NetworkOptions) GetFamily() bool {
	if x != nil {
		return x.Family
	}
	return false
}

func (x *NetworkOptions) GetWithPrefix() bool {
	if x != nil {
		return x.WithPrefix
	}
	return false
}

func (x *NetworkOptions) GetMacaddr8() bool {
	if x != nil {
		return x.Macaddr8
	}
	return false
}

type UUIDOptions struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	IsRandom      bool                   `protobuf:"varint,1,opt,name=is_random,json=isRandom,proto3" json:"is_random,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UUIDOptions) Reset() {
	*x = UUIDOptions{}
	mi := &file_postgres_proto_schema_v1_column_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UUIDOptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UUIDOptions) ProtoMessage() {}

func (x *UUIDOptions) ProtoReflect() protoreflect.Message {
	mi := &file_postgres_proto_schema_v1_column_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UUIDOptions.ProtoReflect.Descriptor instead.
func (*UUIDOptions) Descriptor() ([]byte, []int) {
	return file_postgres_proto_schema_v1_column_proto_rawDescGZIP(), []int{10}
}

func (x *UUIDOptions) GetIsRandom() bool {
	if x != nil {
		return x.IsRandom
	}
	return false
}

type TSVECTOROptions struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Parser        string                 `protobuf:"bytes,1,opt,name=parser,proto3" json:"parser,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TSVECTOROptions) Reset() {
	*x = TSVECTOROptions{}
	mi := &file_postgres_proto_schema_v1_column_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TSVECTOROptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TSVECTOROptions) ProtoMessage() {}

func (x *TSVECTOROptions) ProtoReflect() protoreflect.Message {
	mi := &file_postgres_proto_schema_v1_column_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TSVECTOROptions.ProtoReflect.Descriptor instead.
func (*TSVECTOROptions) Descriptor() ([]byte, []int) {
	return file_postgres_proto_schema_v1_column_proto_rawDescGZIP(), []int{11}
}

func (x *TSVECTOROptions) GetParser() string {
	if x != nil {
		return x.Parser
	}
	return ""
}

// Column options
type ColumnOptions struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to TypeOptions:
	//
	//	*ColumnOptions_Varchar
	//	*ColumnOptions_Char
	//	*ColumnOptions_Numeric
	//	*ColumnOptions_Bit
	//	*ColumnOptions_Time
	//	*ColumnOptions_EnumOptions
	//	*ColumnOptions_Interval
	//	*ColumnOptions_Json
	//	*ColumnOptions_Geometric
	//	*ColumnOptions_Network
	//	*ColumnOptions_Uuid
	//	*ColumnOptions_Tsvector
	TypeOptions   isColumnOptions_TypeOptions `protobuf_oneof:"type_options"`
	Constraints   []*Constraint               `protobuf:"bytes,20,rep,name=constraints,proto3" json:"constraints,omitempty"`
	DefaultValue  string                      `protobuf:"bytes,21,opt,name=default_value,json=defaultValue,proto3" json:"default_value,omitempty"`
	Collation     string                      `protobuf:"bytes,22,opt,name=collation,proto3" json:"collation,omitempty"`
	Type          Type                        `protobuf:"varint,23,opt,name=type,proto3,enum=postgres_proto_schema.v1.Type" json:"type,omitempty"` // The base type
	IsArray       bool                        `protobuf:"varint,24,opt,name=is_array,json=isArray,proto3" json:"is_array,omitempty"`               // Whether this is an array of the base type
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ColumnOptions) Reset() {
	*x = ColumnOptions{}
	mi := &file_postgres_proto_schema_v1_column_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ColumnOptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ColumnOptions) ProtoMessage() {}

func (x *ColumnOptions) ProtoReflect() protoreflect.Message {
	mi := &file_postgres_proto_schema_v1_column_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ColumnOptions.ProtoReflect.Descriptor instead.
func (*ColumnOptions) Descriptor() ([]byte, []int) {
	return file_postgres_proto_schema_v1_column_proto_rawDescGZIP(), []int{12}
}

func (x *ColumnOptions) GetTypeOptions() isColumnOptions_TypeOptions {
	if x != nil {
		return x.TypeOptions
	}
	return nil
}

func (x *ColumnOptions) GetVarchar() *VarcharOptions {
	if x != nil {
		if x, ok := x.TypeOptions.(*ColumnOptions_Varchar); ok {
			return x.Varchar
		}
	}
	return nil
}

func (x *ColumnOptions) GetChar() *CharOptions {
	if x != nil {
		if x, ok := x.TypeOptions.(*ColumnOptions_Char); ok {
			return x.Char
		}
	}
	return nil
}

func (x *ColumnOptions) GetNumeric() *NumericOptions {
	if x != nil {
		if x, ok := x.TypeOptions.(*ColumnOptions_Numeric); ok {
			return x.Numeric
		}
	}
	return nil
}

func (x *ColumnOptions) GetBit() *BitOptions {
	if x != nil {
		if x, ok := x.TypeOptions.(*ColumnOptions_Bit); ok {
			return x.Bit
		}
	}
	return nil
}

func (x *ColumnOptions) GetTime() *TimeOptions {
	if x != nil {
		if x, ok := x.TypeOptions.(*ColumnOptions_Time); ok {
			return x.Time
		}
	}
	return nil
}

func (x *ColumnOptions) GetEnumOptions() *EnumOptions {
	if x != nil {
		if x, ok := x.TypeOptions.(*ColumnOptions_EnumOptions); ok {
			return x.EnumOptions
		}
	}
	return nil
}

func (x *ColumnOptions) GetInterval() *IntervalOptions {
	if x != nil {
		if x, ok := x.TypeOptions.(*ColumnOptions_Interval); ok {
			return x.Interval
		}
	}
	return nil
}

func (x *ColumnOptions) GetJson() *JSONOptions {
	if x != nil {
		if x, ok := x.TypeOptions.(*ColumnOptions_Json); ok {
			return x.Json
		}
	}
	return nil
}

func (x *ColumnOptions) GetGeometric() *GeometricOptions {
	if x != nil {
		if x, ok := x.TypeOptions.(*ColumnOptions_Geometric); ok {
			return x.Geometric
		}
	}
	return nil
}

func (x *ColumnOptions) GetNetwork() *NetworkOptions {
	if x != nil {
		if x, ok := x.TypeOptions.(*ColumnOptions_Network); ok {
			return x.Network
		}
	}
	return nil
}

func (x *ColumnOptions) GetUuid() *UUIDOptions {
	if x != nil {
		if x, ok := x.TypeOptions.(*ColumnOptions_Uuid); ok {
			return x.Uuid
		}
	}
	return nil
}

func (x *ColumnOptions) GetTsvector() *TSVECTOROptions {
	if x != nil {
		if x, ok := x.TypeOptions.(*ColumnOptions_Tsvector); ok {
			return x.Tsvector
		}
	}
	return nil
}

func (x *ColumnOptions) GetConstraints() []*Constraint {
	if x != nil {
		return x.Constraints
	}
	return nil
}

func (x *ColumnOptions) GetDefaultValue() string {
	if x != nil {
		return x.DefaultValue
	}
	return ""
}

func (x *ColumnOptions) GetCollation() string {
	if x != nil {
		return x.Collation
	}
	return ""
}

func (x *ColumnOptions) GetType() Type {
	if x != nil {
		return x.Type
	}
	return Type_TYPE_TEXT
}

func (x *ColumnOptions) GetIsArray() bool {
	if x != nil {
		return x.IsArray
	}
	return false
}

type isColumnOptions_TypeOptions interface {
	isColumnOptions_TypeOptions()
}

type ColumnOptions_Varchar struct {
	Varchar *VarcharOptions `protobuf:"bytes,2,opt,name=varchar,proto3,oneof"`
}

type ColumnOptions_Char struct {
	Char *CharOptions `protobuf:"bytes,3,opt,name=char,proto3,oneof"`
}

type ColumnOptions_Numeric struct {
	Numeric *NumericOptions `protobuf:"bytes,4,opt,name=numeric,proto3,oneof"`
}

type ColumnOptions_Bit struct {
	Bit *BitOptions `protobuf:"bytes,5,opt,name=bit,proto3,oneof"`
}

type ColumnOptions_Time struct {
	Time *TimeOptions `protobuf:"bytes,6,opt,name=time,proto3,oneof"`
}

type ColumnOptions_EnumOptions struct {
	EnumOptions *EnumOptions `protobuf:"bytes,7,opt,name=enum_options,json=enumOptions,proto3,oneof"`
}

type ColumnOptions_Interval struct {
	Interval *IntervalOptions `protobuf:"bytes,8,opt,name=interval,proto3,oneof"`
}

type ColumnOptions_Json struct {
	Json *JSONOptions `protobuf:"bytes,9,opt,name=json,proto3,oneof"`
}

type ColumnOptions_Geometric struct {
	Geometric *GeometricOptions `protobuf:"bytes,10,opt,name=geometric,proto3,oneof"`
}

type ColumnOptions_Network struct {
	Network *NetworkOptions `protobuf:"bytes,11,opt,name=network,proto3,oneof"`
}

type ColumnOptions_Uuid struct {
	Uuid *UUIDOptions `protobuf:"bytes,12,opt,name=uuid,proto3,oneof"`
}

type ColumnOptions_Tsvector struct {
	Tsvector *TSVECTOROptions `protobuf:"bytes,13,opt,name=tsvector,proto3,oneof"`
}

func (*ColumnOptions_Varchar) isColumnOptions_TypeOptions() {}

func (*ColumnOptions_Char) isColumnOptions_TypeOptions() {}

func (*ColumnOptions_Numeric) isColumnOptions_TypeOptions() {}

func (*ColumnOptions_Bit) isColumnOptions_TypeOptions() {}

func (*ColumnOptions_Time) isColumnOptions_TypeOptions() {}

func (*ColumnOptions_EnumOptions) isColumnOptions_TypeOptions() {}

func (*ColumnOptions_Interval) isColumnOptions_TypeOptions() {}

func (*ColumnOptions_Json) isColumnOptions_TypeOptions() {}

func (*ColumnOptions_Geometric) isColumnOptions_TypeOptions() {}

func (*ColumnOptions_Network) isColumnOptions_TypeOptions() {}

func (*ColumnOptions_Uuid) isColumnOptions_TypeOptions() {}

func (*ColumnOptions_Tsvector) isColumnOptions_TypeOptions() {}

// Column definition
type Column struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Name          string                 `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Type          Type                   `protobuf:"varint,2,opt,name=type,proto3,enum=postgres_proto_schema.v1.Type" json:"type,omitempty"`
	Options       *ColumnOptions         `protobuf:"bytes,3,opt,name=options,proto3" json:"options,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Column) Reset() {
	*x = Column{}
	mi := &file_postgres_proto_schema_v1_column_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Column) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Column) ProtoMessage() {}

func (x *Column) ProtoReflect() protoreflect.Message {
	mi := &file_postgres_proto_schema_v1_column_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Column.ProtoReflect.Descriptor instead.
func (*Column) Descriptor() ([]byte, []int) {
	return file_postgres_proto_schema_v1_column_proto_rawDescGZIP(), []int{13}
}

func (x *Column) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Column) GetType() Type {
	if x != nil {
		return x.Type
	}
	return Type_TYPE_TEXT
}

func (x *Column) GetOptions() *ColumnOptions {
	if x != nil {
		return x.Options
	}
	return nil
}

var File_postgres_proto_schema_v1_column_proto protoreflect.FileDescriptor

var file_postgres_proto_schema_v1_column_proto_rawDesc = []byte{
	0x0a, 0x25, 0x70, 0x6f, 0x73, 0x74, 0x67, 0x72, 0x65, 0x73, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x5f, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6f, 0x6c, 0x75, 0x6d,
	0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x18, 0x70, 0x6f, 0x73, 0x74, 0x67, 0x72, 0x65,
	0x73, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x5f, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x76,
	0x31, 0x1a, 0x1b, 0x62, 0x75, 0x66, 0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2f,
	0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x20,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f,
	0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x6f, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x25, 0x70, 0x6f, 0x73, 0x74, 0x67, 0x72, 0x65, 0x73, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x5f, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x58, 0x0a, 0x0e, 0x56, 0x61, 0x72, 0x63, 0x68,
	0x61, 0x72, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x1f, 0x0a, 0x06, 0x6c, 0x65, 0x6e,
	0x67, 0x74, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x42, 0x07, 0xba, 0x48, 0x04, 0x1a, 0x02,
	0x20, 0x00, 0x52, 0x06, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x12, 0x25, 0x0a, 0x09, 0x63, 0x6f,
	0x6c, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xba,
	0x48, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x09, 0x63, 0x6f, 0x6c, 0x6c, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x22, 0x55, 0x0a, 0x0b, 0x43, 0x68, 0x61, 0x72, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x12, 0x1f, 0x0a, 0x06, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05,
	0x42, 0x07, 0xba, 0x48, 0x04, 0x1a, 0x02, 0x20, 0x00, 0x52, 0x06, 0x6c, 0x65, 0x6e, 0x67, 0x74,
	0x68, 0x12, 0x25, 0x0a, 0x09, 0x63, 0x6f, 0x6c, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xba, 0x48, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x09, 0x63,
	0x6f, 0x6c, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x56, 0x0a, 0x0e, 0x4e, 0x75, 0x6d, 0x65,
	0x72, 0x69, 0x63, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x25, 0x0a, 0x09, 0x70, 0x72,
	0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x42, 0x07, 0xba,
	0x48, 0x04, 0x1a, 0x02, 0x20, 0x00, 0x52, 0x09, 0x70, 0x72, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f,
	0x6e, 0x12, 0x1d, 0x0a, 0x05, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05,
	0x42, 0x07, 0xba, 0x48, 0x04, 0x1a, 0x02, 0x28, 0x00, 0x52, 0x05, 0x73, 0x63, 0x61, 0x6c, 0x65,
	0x22, 0x47, 0x0a, 0x0a, 0x42, 0x69, 0x74, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x18,
	0x0a, 0x07, 0x76, 0x61, 0x72, 0x79, 0x69, 0x6e, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x07, 0x76, 0x61, 0x72, 0x79, 0x69, 0x6e, 0x67, 0x12, 0x1f, 0x0a, 0x06, 0x6c, 0x65, 0x6e, 0x67,
	0x74, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x42, 0x07, 0xba, 0x48, 0x04, 0x1a, 0x02, 0x20,
	0x00, 0x52, 0x06, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x22, 0x5c, 0x0a, 0x0b, 0x54, 0x69, 0x6d,
	0x65, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x27, 0x0a, 0x09, 0x70, 0x72, 0x65, 0x63,
	0x69, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x42, 0x09, 0xba, 0x48, 0x06,
	0x1a, 0x04, 0x18, 0x06, 0x28, 0x00, 0x52, 0x09, 0x70, 0x72, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f,
	0x6e, 0x12, 0x24, 0x0a, 0x0e, 0x77, 0x69, 0x74, 0x68, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x7a,
	0x6f, 0x6e, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x77, 0x69, 0x74, 0x68, 0x54,
	0x69, 0x6d, 0x65, 0x5a, 0x6f, 0x6e, 0x65, 0x22, 0x37, 0x0a, 0x0b, 0x45, 0x6e, 0x75, 0x6d, 0x4f,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x28, 0x0a, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x42, 0x10, 0xba, 0x48, 0x0d, 0x92, 0x01, 0x0a, 0x08, 0x01,
	0x18, 0x01, 0x22, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73,
	0x22, 0x5b, 0x0a, 0x0f, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x4f, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x12, 0x1f, 0x0a, 0x06, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x07, 0xba, 0x48, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x06, 0x66, 0x69,
	0x65, 0x6c, 0x64, 0x73, 0x12, 0x27, 0x0a, 0x09, 0x70, 0x72, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f,
	0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x42, 0x09, 0xba, 0x48, 0x06, 0x1a, 0x04, 0x18, 0x06,
	0x28, 0x00, 0x52, 0x09, 0x70, 0x72, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x4e, 0x0a,
	0x0b, 0x4a, 0x53, 0x4f, 0x4e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x16, 0x0a, 0x06,
	0x62, 0x69, 0x6e, 0x61, 0x72, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x62, 0x69,
	0x6e, 0x61, 0x72, 0x79, 0x12, 0x27, 0x0a, 0x0a, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xba, 0x48, 0x04, 0x72, 0x02, 0x10,
	0x01, 0x52, 0x0a, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x5d, 0x0a,
	0x10, 0x47, 0x65, 0x6f, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x12, 0x1b, 0x0a, 0x04, 0x73, 0x72, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x07, 0xba, 0x48, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x04, 0x73, 0x72, 0x69, 0x64, 0x12, 0x15,
	0x0a, 0x06, 0x77, 0x69, 0x74, 0x68, 0x5f, 0x7a, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05,
	0x77, 0x69, 0x74, 0x68, 0x5a, 0x12, 0x15, 0x0a, 0x06, 0x77, 0x69, 0x74, 0x68, 0x5f, 0x6d, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x77, 0x69, 0x74, 0x68, 0x4d, 0x22, 0x65, 0x0a, 0x0e,
	0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x16,
	0x0a, 0x06, 0x66, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06,
	0x66, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x12, 0x1f, 0x0a, 0x0b, 0x77, 0x69, 0x74, 0x68, 0x5f, 0x70,
	0x72, 0x65, 0x66, 0x69, 0x78, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x77, 0x69, 0x74,
	0x68, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x12, 0x1a, 0x0a, 0x08, 0x6d, 0x61, 0x63, 0x61, 0x64,
	0x64, 0x72, 0x38, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x6d, 0x61, 0x63, 0x61, 0x64,
	0x64, 0x72, 0x38, 0x22, 0x2a, 0x0a, 0x0b, 0x55, 0x55, 0x49, 0x44, 0x4f, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x69, 0x73, 0x5f, 0x72, 0x61, 0x6e, 0x64, 0x6f, 0x6d, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x69, 0x73, 0x52, 0x61, 0x6e, 0x64, 0x6f, 0x6d, 0x22,
	0x32, 0x0a, 0x0f, 0x54, 0x53, 0x56, 0x45, 0x43, 0x54, 0x4f, 0x52, 0x4f, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x12, 0x1f, 0x0a, 0x06, 0x70, 0x61, 0x72, 0x73, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x07, 0xba, 0x48, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x06, 0x70, 0x61, 0x72,
	0x73, 0x65, 0x72, 0x22, 0xa3, 0x08, 0x0a, 0x0d, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x4f, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x44, 0x0a, 0x07, 0x76, 0x61, 0x72, 0x63, 0x68, 0x61, 0x72,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x70, 0x6f, 0x73, 0x74, 0x67, 0x72, 0x65,
	0x73, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x5f, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x76,
	0x31, 0x2e, 0x56, 0x61, 0x72, 0x63, 0x68, 0x61, 0x72, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x48, 0x00, 0x52, 0x07, 0x76, 0x61, 0x72, 0x63, 0x68, 0x61, 0x72, 0x12, 0x3b, 0x0a, 0x04, 0x63,
	0x68, 0x61, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x70, 0x6f, 0x73, 0x74,
	0x67, 0x72, 0x65, 0x73, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x5f, 0x73, 0x63, 0x68, 0x65, 0x6d,
	0x61, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x68, 0x61, 0x72, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x48, 0x00, 0x52, 0x04, 0x63, 0x68, 0x61, 0x72, 0x12, 0x44, 0x0a, 0x07, 0x6e, 0x75, 0x6d, 0x65,
	0x72, 0x69, 0x63, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x70, 0x6f, 0x73, 0x74,
	0x67, 0x72, 0x65, 0x73, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x5f, 0x73, 0x63, 0x68, 0x65, 0x6d,
	0x61, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x75, 0x6d, 0x65, 0x72, 0x69, 0x63, 0x4f, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x48, 0x00, 0x52, 0x07, 0x6e, 0x75, 0x6d, 0x65, 0x72, 0x69, 0x63, 0x12, 0x38,
	0x0a, 0x03, 0x62, 0x69, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x70, 0x6f,
	0x73, 0x74, 0x67, 0x72, 0x65, 0x73, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x5f, 0x73, 0x63, 0x68,
	0x65, 0x6d, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x69, 0x74, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x48, 0x00, 0x52, 0x03, 0x62, 0x69, 0x74, 0x12, 0x3b, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x70, 0x6f, 0x73, 0x74, 0x67, 0x72, 0x65,
	0x73, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x5f, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x76,
	0x31, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x48, 0x00, 0x52,
	0x04, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x4a, 0x0a, 0x0c, 0x65, 0x6e, 0x75, 0x6d, 0x5f, 0x6f, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x70, 0x6f,
	0x73, 0x74, 0x67, 0x72, 0x65, 0x73, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x5f, 0x73, 0x63, 0x68,
	0x65, 0x6d, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x6e, 0x75, 0x6d, 0x4f, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x48, 0x00, 0x52, 0x0b, 0x65, 0x6e, 0x75, 0x6d, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x12, 0x47, 0x0a, 0x08, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x70, 0x6f, 0x73, 0x74, 0x67, 0x72, 0x65, 0x73, 0x5f, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x5f, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x49,
	0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x48, 0x00,
	0x52, 0x08, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x12, 0x3b, 0x0a, 0x04, 0x6a, 0x73,
	0x6f, 0x6e, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x70, 0x6f, 0x73, 0x74, 0x67,
	0x72, 0x65, 0x73, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x5f, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61,
	0x2e, 0x76, 0x31, 0x2e, 0x4a, 0x53, 0x4f, 0x4e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x48,
	0x00, 0x52, 0x04, 0x6a, 0x73, 0x6f, 0x6e, 0x12, 0x4a, 0x0a, 0x09, 0x67, 0x65, 0x6f, 0x6d, 0x65,
	0x74, 0x72, 0x69, 0x63, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x70, 0x6f, 0x73,
	0x74, 0x67, 0x72, 0x65, 0x73, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x5f, 0x73, 0x63, 0x68, 0x65,
	0x6d, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x6f, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x4f,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x48, 0x00, 0x52, 0x09, 0x67, 0x65, 0x6f, 0x6d, 0x65, 0x74,
	0x72, 0x69, 0x63, 0x12, 0x44, 0x0a, 0x07, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x18, 0x0b,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x70, 0x6f, 0x73, 0x74, 0x67, 0x72, 0x65, 0x73, 0x5f,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x5f, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x76, 0x31, 0x2e,
	0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x48, 0x00,
	0x52, 0x07, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x12, 0x3b, 0x0a, 0x04, 0x75, 0x75, 0x69,
	0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x70, 0x6f, 0x73, 0x74, 0x67, 0x72,
	0x65, 0x73, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x5f, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e,
	0x76, 0x31, 0x2e, 0x55, 0x55, 0x49, 0x44, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x48, 0x00,
	0x52, 0x04, 0x75, 0x75, 0x69, 0x64, 0x12, 0x47, 0x0a, 0x08, 0x74, 0x73, 0x76, 0x65, 0x63, 0x74,
	0x6f, 0x72, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x70, 0x6f, 0x73, 0x74, 0x67,
	0x72, 0x65, 0x73, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x5f, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61,
	0x2e, 0x76, 0x31, 0x2e, 0x54, 0x53, 0x56, 0x45, 0x43, 0x54, 0x4f, 0x52, 0x4f, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x48, 0x00, 0x52, 0x08, 0x74, 0x73, 0x76, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x12,
	0x46, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x74, 0x73, 0x18, 0x14,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x70, 0x6f, 0x73, 0x74, 0x67, 0x72, 0x65, 0x73, 0x5f,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x5f, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x76, 0x31, 0x2e,
	0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x74, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x73,
	0x74, 0x72, 0x61, 0x69, 0x6e, 0x74, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x64, 0x65, 0x66, 0x61, 0x75,
	0x6c, 0x74, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x15, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c,
	0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x1c, 0x0a, 0x09,
	0x63, 0x6f, 0x6c, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x16, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x63, 0x6f, 0x6c, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x32, 0x0a, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x17, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1e, 0x2e, 0x70, 0x6f, 0x73, 0x74, 0x67,
	0x72, 0x65, 0x73, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x5f, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61,
	0x2e, 0x76, 0x31, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x19,
	0x0a, 0x08, 0x69, 0x73, 0x5f, 0x61, 0x72, 0x72, 0x61, 0x79, 0x18, 0x18, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x07, 0x69, 0x73, 0x41, 0x72, 0x72, 0x61, 0x79, 0x42, 0x0e, 0x0a, 0x0c, 0x74, 0x79, 0x70,
	0x65, 0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0xa6, 0x01, 0x0a, 0x06, 0x43, 0x6f,
	0x6c, 0x75, 0x6d, 0x6e, 0x12, 0x1b, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x07, 0xba, 0x48, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x3c, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x1e, 0x2e, 0x70, 0x6f, 0x73, 0x74, 0x67, 0x72, 0x65, 0x73, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x5f, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x42,
	0x08, 0xba, 0x48, 0x05, 0x82, 0x01, 0x02, 0x10, 0x01, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12,
	0x41, 0x0a, 0x07, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x27, 0x2e, 0x70, 0x6f, 0x73, 0x74, 0x67, 0x72, 0x65, 0x73, 0x5f, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x5f, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6c, 0x75,
	0x6d, 0x6e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x07, 0x6f, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x42, 0xbe, 0x01, 0x0a, 0x1c, 0x63, 0x6f, 0x6d, 0x2e, 0x70, 0x6f, 0x73, 0x74, 0x67,
	0x72, 0x65, 0x73, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x5f, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61,
	0x2e, 0x76, 0x31, 0x42, 0x0b, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x50, 0x72, 0x6f, 0x74, 0x6f,
	0x50, 0x01, 0x5a, 0x18, 0x70, 0x6f, 0x73, 0x74, 0x67, 0x72, 0x65, 0x73, 0x5f, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x5f, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2f, 0x76, 0x31, 0xa2, 0x02, 0x03, 0x50,
	0x58, 0x58, 0xaa, 0x02, 0x16, 0x50, 0x6f, 0x73, 0x74, 0x67, 0x72, 0x65, 0x73, 0x50, 0x72, 0x6f,
	0x74, 0x6f, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x56, 0x31, 0xca, 0x02, 0x16, 0x50, 0x6f,
	0x73, 0x74, 0x67, 0x72, 0x65, 0x73, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x53, 0x63, 0x68, 0x65, 0x6d,
	0x61, 0x5c, 0x56, 0x31, 0xe2, 0x02, 0x22, 0x50, 0x6f, 0x73, 0x74, 0x67, 0x72, 0x65, 0x73, 0x50,
	0x72, 0x6f, 0x74, 0x6f, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x5c, 0x56, 0x31, 0x5c, 0x47, 0x50,
	0x42, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0xea, 0x02, 0x17, 0x50, 0x6f, 0x73, 0x74,
	0x67, 0x72, 0x65, 0x73, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x3a,
	0x3a, 0x56, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_postgres_proto_schema_v1_column_proto_rawDescOnce sync.Once
	file_postgres_proto_schema_v1_column_proto_rawDescData = file_postgres_proto_schema_v1_column_proto_rawDesc
)

func file_postgres_proto_schema_v1_column_proto_rawDescGZIP() []byte {
	file_postgres_proto_schema_v1_column_proto_rawDescOnce.Do(func() {
		file_postgres_proto_schema_v1_column_proto_rawDescData = protoimpl.X.CompressGZIP(file_postgres_proto_schema_v1_column_proto_rawDescData)
	})
	return file_postgres_proto_schema_v1_column_proto_rawDescData
}

var file_postgres_proto_schema_v1_column_proto_msgTypes = make([]protoimpl.MessageInfo, 14)
var file_postgres_proto_schema_v1_column_proto_goTypes = []any{
	(*VarcharOptions)(nil),   // 0: postgres_proto_schema.v1.VarcharOptions
	(*CharOptions)(nil),      // 1: postgres_proto_schema.v1.CharOptions
	(*NumericOptions)(nil),   // 2: postgres_proto_schema.v1.NumericOptions
	(*BitOptions)(nil),       // 3: postgres_proto_schema.v1.BitOptions
	(*TimeOptions)(nil),      // 4: postgres_proto_schema.v1.TimeOptions
	(*EnumOptions)(nil),      // 5: postgres_proto_schema.v1.EnumOptions
	(*IntervalOptions)(nil),  // 6: postgres_proto_schema.v1.IntervalOptions
	(*JSONOptions)(nil),      // 7: postgres_proto_schema.v1.JSONOptions
	(*GeometricOptions)(nil), // 8: postgres_proto_schema.v1.GeometricOptions
	(*NetworkOptions)(nil),   // 9: postgres_proto_schema.v1.NetworkOptions
	(*UUIDOptions)(nil),      // 10: postgres_proto_schema.v1.UUIDOptions
	(*TSVECTOROptions)(nil),  // 11: postgres_proto_schema.v1.TSVECTOROptions
	(*ColumnOptions)(nil),    // 12: postgres_proto_schema.v1.ColumnOptions
	(*Column)(nil),           // 13: postgres_proto_schema.v1.Column
	(*Constraint)(nil),       // 14: postgres_proto_schema.v1.Constraint
	(Type)(0),                // 15: postgres_proto_schema.v1.Type
}
var file_postgres_proto_schema_v1_column_proto_depIdxs = []int32{
	0,  // 0: postgres_proto_schema.v1.ColumnOptions.varchar:type_name -> postgres_proto_schema.v1.VarcharOptions
	1,  // 1: postgres_proto_schema.v1.ColumnOptions.char:type_name -> postgres_proto_schema.v1.CharOptions
	2,  // 2: postgres_proto_schema.v1.ColumnOptions.numeric:type_name -> postgres_proto_schema.v1.NumericOptions
	3,  // 3: postgres_proto_schema.v1.ColumnOptions.bit:type_name -> postgres_proto_schema.v1.BitOptions
	4,  // 4: postgres_proto_schema.v1.ColumnOptions.time:type_name -> postgres_proto_schema.v1.TimeOptions
	5,  // 5: postgres_proto_schema.v1.ColumnOptions.enum_options:type_name -> postgres_proto_schema.v1.EnumOptions
	6,  // 6: postgres_proto_schema.v1.ColumnOptions.interval:type_name -> postgres_proto_schema.v1.IntervalOptions
	7,  // 7: postgres_proto_schema.v1.ColumnOptions.json:type_name -> postgres_proto_schema.v1.JSONOptions
	8,  // 8: postgres_proto_schema.v1.ColumnOptions.geometric:type_name -> postgres_proto_schema.v1.GeometricOptions
	9,  // 9: postgres_proto_schema.v1.ColumnOptions.network:type_name -> postgres_proto_schema.v1.NetworkOptions
	10, // 10: postgres_proto_schema.v1.ColumnOptions.uuid:type_name -> postgres_proto_schema.v1.UUIDOptions
	11, // 11: postgres_proto_schema.v1.ColumnOptions.tsvector:type_name -> postgres_proto_schema.v1.TSVECTOROptions
	14, // 12: postgres_proto_schema.v1.ColumnOptions.constraints:type_name -> postgres_proto_schema.v1.Constraint
	15, // 13: postgres_proto_schema.v1.ColumnOptions.type:type_name -> postgres_proto_schema.v1.Type
	15, // 14: postgres_proto_schema.v1.Column.type:type_name -> postgres_proto_schema.v1.Type
	12, // 15: postgres_proto_schema.v1.Column.options:type_name -> postgres_proto_schema.v1.ColumnOptions
	16, // [16:16] is the sub-list for method output_type
	16, // [16:16] is the sub-list for method input_type
	16, // [16:16] is the sub-list for extension type_name
	16, // [16:16] is the sub-list for extension extendee
	0,  // [0:16] is the sub-list for field type_name
}

func init() { file_postgres_proto_schema_v1_column_proto_init() }
func file_postgres_proto_schema_v1_column_proto_init() {
	if File_postgres_proto_schema_v1_column_proto != nil {
		return
	}
	file_buf_validate_validate_proto_init()
	file_postgres_proto_schema_v1_common_proto_init()
	file_postgres_proto_schema_v1_column_proto_msgTypes[12].OneofWrappers = []any{
		(*ColumnOptions_Varchar)(nil),
		(*ColumnOptions_Char)(nil),
		(*ColumnOptions_Numeric)(nil),
		(*ColumnOptions_Bit)(nil),
		(*ColumnOptions_Time)(nil),
		(*ColumnOptions_EnumOptions)(nil),
		(*ColumnOptions_Interval)(nil),
		(*ColumnOptions_Json)(nil),
		(*ColumnOptions_Geometric)(nil),
		(*ColumnOptions_Network)(nil),
		(*ColumnOptions_Uuid)(nil),
		(*ColumnOptions_Tsvector)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_postgres_proto_schema_v1_column_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   14,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_postgres_proto_schema_v1_column_proto_goTypes,
		DependencyIndexes: file_postgres_proto_schema_v1_column_proto_depIdxs,
		MessageInfos:      file_postgres_proto_schema_v1_column_proto_msgTypes,
	}.Build()
	File_postgres_proto_schema_v1_column_proto = out.File
	file_postgres_proto_schema_v1_column_proto_rawDesc = nil
	file_postgres_proto_schema_v1_column_proto_goTypes = nil
	file_postgres_proto_schema_v1_column_proto_depIdxs = nil
}
