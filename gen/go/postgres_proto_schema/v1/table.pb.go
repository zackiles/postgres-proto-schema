// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.1
// 	protoc        (unknown)
// source: postgres_proto_schema/v1/table.proto

package v1

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	_ "google.golang.org/protobuf/types/descriptorpb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Table-specific enums
type IndexMethod int32

const (
	IndexMethod_INDEX_METHOD_UNSPECIFIED IndexMethod = 0
	IndexMethod_INDEX_METHOD_BTREE       IndexMethod = 1
	IndexMethod_INDEX_METHOD_HASH        IndexMethod = 2
	IndexMethod_INDEX_METHOD_GIST        IndexMethod = 3
	IndexMethod_INDEX_METHOD_SPGIST      IndexMethod = 4
	IndexMethod_INDEX_METHOD_GIN         IndexMethod = 5
	IndexMethod_INDEX_METHOD_BRIN        IndexMethod = 6
)

// Enum value maps for IndexMethod.
var (
	IndexMethod_name = map[int32]string{
		0: "INDEX_METHOD_UNSPECIFIED",
		1: "INDEX_METHOD_BTREE",
		2: "INDEX_METHOD_HASH",
		3: "INDEX_METHOD_GIST",
		4: "INDEX_METHOD_SPGIST",
		5: "INDEX_METHOD_GIN",
		6: "INDEX_METHOD_BRIN",
	}
	IndexMethod_value = map[string]int32{
		"INDEX_METHOD_UNSPECIFIED": 0,
		"INDEX_METHOD_BTREE":       1,
		"INDEX_METHOD_HASH":        2,
		"INDEX_METHOD_GIST":        3,
		"INDEX_METHOD_SPGIST":      4,
		"INDEX_METHOD_GIN":         5,
		"INDEX_METHOD_BRIN":        6,
	}
)

func (x IndexMethod) Enum() *IndexMethod {
	p := new(IndexMethod)
	*p = x
	return p
}

func (x IndexMethod) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (IndexMethod) Descriptor() protoreflect.EnumDescriptor {
	return file_postgres_proto_schema_v1_table_proto_enumTypes[0].Descriptor()
}

func (IndexMethod) Type() protoreflect.EnumType {
	return &file_postgres_proto_schema_v1_table_proto_enumTypes[0]
}

func (x IndexMethod) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use IndexMethod.Descriptor instead.
func (IndexMethod) EnumDescriptor() ([]byte, []int) {
	return file_postgres_proto_schema_v1_table_proto_rawDescGZIP(), []int{0}
}

type PartitionMethod int32

const (
	PartitionMethod_PARTITION_METHOD_UNSPECIFIED PartitionMethod = 0
	PartitionMethod_PARTITION_METHOD_RANGE       PartitionMethod = 1
	PartitionMethod_PARTITION_METHOD_HASH        PartitionMethod = 2
	PartitionMethod_PARTITION_METHOD_LIST        PartitionMethod = 3
)

// Enum value maps for PartitionMethod.
var (
	PartitionMethod_name = map[int32]string{
		0: "PARTITION_METHOD_UNSPECIFIED",
		1: "PARTITION_METHOD_RANGE",
		2: "PARTITION_METHOD_HASH",
		3: "PARTITION_METHOD_LIST",
	}
	PartitionMethod_value = map[string]int32{
		"PARTITION_METHOD_UNSPECIFIED": 0,
		"PARTITION_METHOD_RANGE":       1,
		"PARTITION_METHOD_HASH":        2,
		"PARTITION_METHOD_LIST":        3,
	}
)

func (x PartitionMethod) Enum() *PartitionMethod {
	p := new(PartitionMethod)
	*p = x
	return p
}

func (x PartitionMethod) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PartitionMethod) Descriptor() protoreflect.EnumDescriptor {
	return file_postgres_proto_schema_v1_table_proto_enumTypes[1].Descriptor()
}

func (PartitionMethod) Type() protoreflect.EnumType {
	return &file_postgres_proto_schema_v1_table_proto_enumTypes[1]
}

func (x PartitionMethod) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PartitionMethod.Descriptor instead.
func (PartitionMethod) EnumDescriptor() ([]byte, []int) {
	return file_postgres_proto_schema_v1_table_proto_rawDescGZIP(), []int{1}
}

// Table-specific messages
type IndexDefinition struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Name          string                 `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Columns       []string               `protobuf:"bytes,2,rep,name=columns,proto3" json:"columns,omitempty"`
	Expression    string                 `protobuf:"bytes,3,opt,name=expression,proto3" json:"expression,omitempty"`
	IndexMethod   IndexMethod            `protobuf:"varint,4,opt,name=index_method,json=indexMethod,proto3,enum=postgres_proto_schema.v1.IndexMethod" json:"index_method,omitempty"`
	Unique        bool                   `protobuf:"varint,5,opt,name=unique,proto3" json:"unique,omitempty"`
	WhereClause   string                 `protobuf:"bytes,6,opt,name=where_clause,json=whereClause,proto3" json:"where_clause,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *IndexDefinition) Reset() {
	*x = IndexDefinition{}
	mi := &file_postgres_proto_schema_v1_table_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *IndexDefinition) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IndexDefinition) ProtoMessage() {}

func (x *IndexDefinition) ProtoReflect() protoreflect.Message {
	mi := &file_postgres_proto_schema_v1_table_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IndexDefinition.ProtoReflect.Descriptor instead.
func (*IndexDefinition) Descriptor() ([]byte, []int) {
	return file_postgres_proto_schema_v1_table_proto_rawDescGZIP(), []int{0}
}

func (x *IndexDefinition) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *IndexDefinition) GetColumns() []string {
	if x != nil {
		return x.Columns
	}
	return nil
}

func (x *IndexDefinition) GetExpression() string {
	if x != nil {
		return x.Expression
	}
	return ""
}

func (x *IndexDefinition) GetIndexMethod() IndexMethod {
	if x != nil {
		return x.IndexMethod
	}
	return IndexMethod_INDEX_METHOD_UNSPECIFIED
}

func (x *IndexDefinition) GetUnique() bool {
	if x != nil {
		return x.Unique
	}
	return false
}

func (x *IndexDefinition) GetWhereClause() string {
	if x != nil {
		return x.WhereClause
	}
	return ""
}

type Partitioning struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Method        PartitionMethod        `protobuf:"varint,1,opt,name=method,proto3,enum=postgres_proto_schema.v1.PartitionMethod" json:"method,omitempty"`
	Keys          []string               `protobuf:"bytes,2,rep,name=keys,proto3" json:"keys,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Partitioning) Reset() {
	*x = Partitioning{}
	mi := &file_postgres_proto_schema_v1_table_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Partitioning) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Partitioning) ProtoMessage() {}

func (x *Partitioning) ProtoReflect() protoreflect.Message {
	mi := &file_postgres_proto_schema_v1_table_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Partitioning.ProtoReflect.Descriptor instead.
func (*Partitioning) Descriptor() ([]byte, []int) {
	return file_postgres_proto_schema_v1_table_proto_rawDescGZIP(), []int{1}
}

func (x *Partitioning) GetMethod() PartitionMethod {
	if x != nil {
		return x.Method
	}
	return PartitionMethod_PARTITION_METHOD_UNSPECIFIED
}

func (x *Partitioning) GetKeys() []string {
	if x != nil {
		return x.Keys
	}
	return nil
}

type RowLevelSecurityPolicy struct {
	state               protoimpl.MessageState `protogen:"open.v1"`
	Name                string                 `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	UsingExpression     string                 `protobuf:"bytes,2,opt,name=using_expression,json=usingExpression,proto3" json:"using_expression,omitempty"`
	WithCheckExpression string                 `protobuf:"bytes,3,opt,name=with_check_expression,json=withCheckExpression,proto3" json:"with_check_expression,omitempty"`
	Role                string                 `protobuf:"bytes,4,opt,name=role,proto3" json:"role,omitempty"`
	unknownFields       protoimpl.UnknownFields
	sizeCache           protoimpl.SizeCache
}

func (x *RowLevelSecurityPolicy) Reset() {
	*x = RowLevelSecurityPolicy{}
	mi := &file_postgres_proto_schema_v1_table_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RowLevelSecurityPolicy) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RowLevelSecurityPolicy) ProtoMessage() {}

func (x *RowLevelSecurityPolicy) ProtoReflect() protoreflect.Message {
	mi := &file_postgres_proto_schema_v1_table_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RowLevelSecurityPolicy.ProtoReflect.Descriptor instead.
func (*RowLevelSecurityPolicy) Descriptor() ([]byte, []int) {
	return file_postgres_proto_schema_v1_table_proto_rawDescGZIP(), []int{2}
}

func (x *RowLevelSecurityPolicy) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *RowLevelSecurityPolicy) GetUsingExpression() string {
	if x != nil {
		return x.UsingExpression
	}
	return ""
}

func (x *RowLevelSecurityPolicy) GetWithCheckExpression() string {
	if x != nil {
		return x.WithCheckExpression
	}
	return ""
}

func (x *RowLevelSecurityPolicy) GetRole() string {
	if x != nil {
		return x.Role
	}
	return ""
}

// Patterns for table generation
type Patterns struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Patterns) Reset() {
	*x = Patterns{}
	mi := &file_postgres_proto_schema_v1_table_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Patterns) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Patterns) ProtoMessage() {}

func (x *Patterns) ProtoReflect() protoreflect.Message {
	mi := &file_postgres_proto_schema_v1_table_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Patterns.ProtoReflect.Descriptor instead.
func (*Patterns) Descriptor() ([]byte, []int) {
	return file_postgres_proto_schema_v1_table_proto_rawDescGZIP(), []int{3}
}

// Table options
type TableOptions struct {
	state             protoimpl.MessageState    `protogen:"open.v1"`
	TableName         string                    `protobuf:"bytes,1,opt,name=table_name,json=tableName,proto3" json:"table_name,omitempty"`
	Schema            string                    `protobuf:"bytes,2,opt,name=schema,proto3" json:"schema,omitempty"`
	Tablespace        string                    `protobuf:"bytes,3,opt,name=tablespace,proto3" json:"tablespace,omitempty"`
	IsUnlogged        bool                      `protobuf:"varint,4,opt,name=is_unlogged,json=isUnlogged,proto3" json:"is_unlogged,omitempty"`
	IsTemporary       bool                      `protobuf:"varint,5,opt,name=is_temporary,json=isTemporary,proto3" json:"is_temporary,omitempty"`
	Indexes           []*IndexDefinition        `protobuf:"bytes,6,rep,name=indexes,proto3" json:"indexes,omitempty"`
	TableConstraints  []*Constraint             `protobuf:"bytes,7,rep,name=table_constraints,json=tableConstraints,proto3" json:"table_constraints,omitempty"`
	StorageParameters map[string]string         `protobuf:"bytes,8,rep,name=storage_parameters,json=storageParameters,proto3" json:"storage_parameters,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	Partitioning      *Partitioning             `protobuf:"bytes,9,opt,name=partitioning,proto3" json:"partitioning,omitempty"`
	RlsPolicies       []*RowLevelSecurityPolicy `protobuf:"bytes,10,rep,name=rls_policies,json=rlsPolicies,proto3" json:"rls_policies,omitempty"`
	Collation         string                    `protobuf:"bytes,12,opt,name=collation,proto3" json:"collation,omitempty"`
	Storage           string                    `protobuf:"bytes,13,opt,name=storage,proto3" json:"storage,omitempty"`
	Compression       string                    `protobuf:"bytes,14,opt,name=compression,proto3" json:"compression,omitempty"`
	StatisticsTarget  int32                     `protobuf:"varint,15,opt,name=statistics_target,json=statisticsTarget,proto3" json:"statistics_target,omitempty"`
	DeploymentOption  Platform                  `protobuf:"varint,16,opt,name=deployment_option,json=deploymentOption,proto3,enum=postgres_proto_schema.v1.Platform" json:"deployment_option,omitempty"`
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *TableOptions) Reset() {
	*x = TableOptions{}
	mi := &file_postgres_proto_schema_v1_table_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TableOptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TableOptions) ProtoMessage() {}

func (x *TableOptions) ProtoReflect() protoreflect.Message {
	mi := &file_postgres_proto_schema_v1_table_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TableOptions.ProtoReflect.Descriptor instead.
func (*TableOptions) Descriptor() ([]byte, []int) {
	return file_postgres_proto_schema_v1_table_proto_rawDescGZIP(), []int{4}
}

func (x *TableOptions) GetTableName() string {
	if x != nil {
		return x.TableName
	}
	return ""
}

func (x *TableOptions) GetSchema() string {
	if x != nil {
		return x.Schema
	}
	return ""
}

func (x *TableOptions) GetTablespace() string {
	if x != nil {
		return x.Tablespace
	}
	return ""
}

func (x *TableOptions) GetIsUnlogged() bool {
	if x != nil {
		return x.IsUnlogged
	}
	return false
}

func (x *TableOptions) GetIsTemporary() bool {
	if x != nil {
		return x.IsTemporary
	}
	return false
}

func (x *TableOptions) GetIndexes() []*IndexDefinition {
	if x != nil {
		return x.Indexes
	}
	return nil
}

func (x *TableOptions) GetTableConstraints() []*Constraint {
	if x != nil {
		return x.TableConstraints
	}
	return nil
}

func (x *TableOptions) GetStorageParameters() map[string]string {
	if x != nil {
		return x.StorageParameters
	}
	return nil
}

func (x *TableOptions) GetPartitioning() *Partitioning {
	if x != nil {
		return x.Partitioning
	}
	return nil
}

func (x *TableOptions) GetRlsPolicies() []*RowLevelSecurityPolicy {
	if x != nil {
		return x.RlsPolicies
	}
	return nil
}

func (x *TableOptions) GetCollation() string {
	if x != nil {
		return x.Collation
	}
	return ""
}

func (x *TableOptions) GetStorage() string {
	if x != nil {
		return x.Storage
	}
	return ""
}

func (x *TableOptions) GetCompression() string {
	if x != nil {
		return x.Compression
	}
	return ""
}

func (x *TableOptions) GetStatisticsTarget() int32 {
	if x != nil {
		return x.StatisticsTarget
	}
	return 0
}

func (x *TableOptions) GetDeploymentOption() Platform {
	if x != nil {
		return x.DeploymentOption
	}
	return Platform_PLATFORM_LATEST
}

// Table definition
type Table struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Name          string                 `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Columns       []*Column              `protobuf:"bytes,2,rep,name=columns,proto3" json:"columns,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Table) Reset() {
	*x = Table{}
	mi := &file_postgres_proto_schema_v1_table_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Table) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Table) ProtoMessage() {}

func (x *Table) ProtoReflect() protoreflect.Message {
	mi := &file_postgres_proto_schema_v1_table_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Table.ProtoReflect.Descriptor instead.
func (*Table) Descriptor() ([]byte, []int) {
	return file_postgres_proto_schema_v1_table_proto_rawDescGZIP(), []int{5}
}

func (x *Table) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Table) GetColumns() []*Column {
	if x != nil {
		return x.Columns
	}
	return nil
}

type Patterns_Timestamps struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	TrackCreated  bool                   `protobuf:"varint,1,opt,name=track_created,json=trackCreated,proto3" json:"track_created,omitempty"`
	TrackUpdated  bool                   `protobuf:"varint,2,opt,name=track_updated,json=trackUpdated,proto3" json:"track_updated,omitempty"`
	TrackDeleted  bool                   `protobuf:"varint,3,opt,name=track_deleted,json=trackDeleted,proto3" json:"track_deleted,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Patterns_Timestamps) Reset() {
	*x = Patterns_Timestamps{}
	mi := &file_postgres_proto_schema_v1_table_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Patterns_Timestamps) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Patterns_Timestamps) ProtoMessage() {}

func (x *Patterns_Timestamps) ProtoReflect() protoreflect.Message {
	mi := &file_postgres_proto_schema_v1_table_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Patterns_Timestamps.ProtoReflect.Descriptor instead.
func (*Patterns_Timestamps) Descriptor() ([]byte, []int) {
	return file_postgres_proto_schema_v1_table_proto_rawDescGZIP(), []int{3, 0}
}

func (x *Patterns_Timestamps) GetTrackCreated() bool {
	if x != nil {
		return x.TrackCreated
	}
	return false
}

func (x *Patterns_Timestamps) GetTrackUpdated() bool {
	if x != nil {
		return x.TrackUpdated
	}
	return false
}

func (x *Patterns_Timestamps) GetTrackDeleted() bool {
	if x != nil {
		return x.TrackDeleted
	}
	return false
}

type Patterns_Audit struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	TrackCreator  bool                   `protobuf:"varint,1,opt,name=track_creator,json=trackCreator,proto3" json:"track_creator,omitempty"`
	TrackUpdater  bool                   `protobuf:"varint,2,opt,name=track_updater,json=trackUpdater,proto3" json:"track_updater,omitempty"`
	AuditSchema   string                 `protobuf:"bytes,3,opt,name=audit_schema,json=auditSchema,proto3" json:"audit_schema,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Patterns_Audit) Reset() {
	*x = Patterns_Audit{}
	mi := &file_postgres_proto_schema_v1_table_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Patterns_Audit) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Patterns_Audit) ProtoMessage() {}

func (x *Patterns_Audit) ProtoReflect() protoreflect.Message {
	mi := &file_postgres_proto_schema_v1_table_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Patterns_Audit.ProtoReflect.Descriptor instead.
func (*Patterns_Audit) Descriptor() ([]byte, []int) {
	return file_postgres_proto_schema_v1_table_proto_rawDescGZIP(), []int{3, 1}
}

func (x *Patterns_Audit) GetTrackCreator() bool {
	if x != nil {
		return x.TrackCreator
	}
	return false
}

func (x *Patterns_Audit) GetTrackUpdater() bool {
	if x != nil {
		return x.TrackUpdater
	}
	return false
}

func (x *Patterns_Audit) GetAuditSchema() string {
	if x != nil {
		return x.AuditSchema
	}
	return ""
}

var File_postgres_proto_schema_v1_table_proto protoreflect.FileDescriptor

var file_postgres_proto_schema_v1_table_proto_rawDesc = []byte{
	0x0a, 0x24, 0x70, 0x6f, 0x73, 0x74, 0x67, 0x72, 0x65, 0x73, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x5f, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2f, 0x76, 0x31, 0x2f, 0x74, 0x61, 0x62, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x18, 0x70, 0x6f, 0x73, 0x74, 0x67, 0x72, 0x65, 0x73,
	0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x5f, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x76, 0x31,
	0x1a, 0x1b, 0x62, 0x75, 0x66, 0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2f, 0x76,
	0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x20, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x64,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x6f, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x25, 0x70, 0x6f, 0x73, 0x74, 0x67, 0x72, 0x65, 0x73, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x5f,
	0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x25, 0x70, 0x6f, 0x73, 0x74, 0x67, 0x72, 0x65, 0x73,
	0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x5f, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2f, 0x76, 0x31,
	0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xb7, 0x02,
	0x0a, 0x0f, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x37, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x23, 0xba, 0x48, 0x20, 0x72, 0x1e, 0x10, 0x01, 0x18, 0x3f, 0x32, 0x18, 0x5e, 0x5b, 0x61, 0x2d,
	0x7a, 0x41, 0x2d, 0x5a, 0x5f, 0x5d, 0x5b, 0x61, 0x2d, 0x7a, 0x41, 0x2d, 0x5a, 0x30, 0x2d, 0x39,
	0x5f, 0x5d, 0x2a, 0x24, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x28, 0x0a, 0x07, 0x63, 0x6f,
	0x6c, 0x75, 0x6d, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x42, 0x0e, 0xba, 0x48, 0x0b,
	0x92, 0x01, 0x08, 0x08, 0x01, 0x22, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x07, 0x63, 0x6f, 0x6c,
	0x75, 0x6d, 0x6e, 0x73, 0x12, 0x28, 0x0a, 0x0a, 0x65, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x08, 0xba, 0x48, 0x05, 0x72, 0x03, 0x18,
	0xff, 0x01, 0x52, 0x0a, 0x65, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x52,
	0x0a, 0x0c, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x5f, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x25, 0x2e, 0x70, 0x6f, 0x73, 0x74, 0x67, 0x72, 0x65, 0x73, 0x5f,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x5f, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x76, 0x31, 0x2e,
	0x49, 0x6e, 0x64, 0x65, 0x78, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x42, 0x08, 0xba, 0x48, 0x05,
	0x82, 0x01, 0x02, 0x10, 0x01, 0x52, 0x0b, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x4d, 0x65, 0x74, 0x68,
	0x6f, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x6e, 0x69, 0x71, 0x75, 0x65, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x06, 0x75, 0x6e, 0x69, 0x71, 0x75, 0x65, 0x12, 0x2b, 0x0a, 0x0c, 0x77, 0x68,
	0x65, 0x72, 0x65, 0x5f, 0x63, 0x6c, 0x61, 0x75, 0x73, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x08, 0xba, 0x48, 0x05, 0x72, 0x03, 0x18, 0xff, 0x01, 0x52, 0x0b, 0x77, 0x68, 0x65, 0x72,
	0x65, 0x43, 0x6c, 0x61, 0x75, 0x73, 0x65, 0x22, 0x79, 0x0a, 0x0c, 0x50, 0x61, 0x72, 0x74, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x69, 0x6e, 0x67, 0x12, 0x4b, 0x0a, 0x06, 0x6d, 0x65, 0x74, 0x68, 0x6f,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x29, 0x2e, 0x70, 0x6f, 0x73, 0x74, 0x67, 0x72,
	0x65, 0x73, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x5f, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e,
	0x76, 0x31, 0x2e, 0x50, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x74, 0x68,
	0x6f, 0x64, 0x42, 0x08, 0xba, 0x48, 0x05, 0x82, 0x01, 0x02, 0x10, 0x01, 0x52, 0x06, 0x6d, 0x65,
	0x74, 0x68, 0x6f, 0x64, 0x12, 0x1c, 0x0a, 0x04, 0x6b, 0x65, 0x79, 0x73, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x09, 0x42, 0x08, 0xba, 0x48, 0x05, 0x92, 0x01, 0x02, 0x08, 0x01, 0x52, 0x04, 0x6b, 0x65,
	0x79, 0x73, 0x22, 0xc4, 0x01, 0x0a, 0x16, 0x52, 0x6f, 0x77, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x53,
	0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0x1b, 0x0a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xba, 0x48, 0x04,
	0x72, 0x02, 0x10, 0x01, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x32, 0x0a, 0x10, 0x75, 0x73,
	0x69, 0x6e, 0x67, 0x5f, 0x65, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xba, 0x48, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x0f, 0x75,
	0x73, 0x69, 0x6e, 0x67, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x3c,
	0x0a, 0x15, 0x77, 0x69, 0x74, 0x68, 0x5f, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x5f, 0x65, 0x78, 0x70,
	0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x08, 0xba,
	0x48, 0x05, 0x72, 0x03, 0x18, 0xff, 0x01, 0x52, 0x13, 0x77, 0x69, 0x74, 0x68, 0x43, 0x68, 0x65,
	0x63, 0x6b, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1b, 0x0a, 0x04,
	0x72, 0x6f, 0x6c, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xba, 0x48, 0x04, 0x72,
	0x02, 0x10, 0x01, 0x52, 0x04, 0x72, 0x6f, 0x6c, 0x65, 0x22, 0xfd, 0x01, 0x0a, 0x08, 0x50, 0x61,
	0x74, 0x74, 0x65, 0x72, 0x6e, 0x73, 0x1a, 0x7b, 0x0a, 0x0a, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x5f, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x74, 0x72, 0x61,
	0x63, 0x6b, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x74, 0x72, 0x61,
	0x63, 0x6b, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x0c, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x12, 0x23,
	0x0a, 0x0d, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x5f, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x64, 0x1a, 0x74, 0x0a, 0x05, 0x41, 0x75, 0x64, 0x69, 0x74, 0x12, 0x23, 0x0a, 0x0d,
	0x74, 0x72, 0x61, 0x63, 0x6b, 0x5f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x0c, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x43, 0x72, 0x65, 0x61, 0x74, 0x6f,
	0x72, 0x12, 0x23, 0x0a, 0x0d, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x72, 0x12, 0x21, 0x0a, 0x0c, 0x61, 0x75, 0x64, 0x69, 0x74, 0x5f,
	0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x61, 0x75,
	0x64, 0x69, 0x74, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x22, 0xc0, 0x07, 0x0a, 0x0c, 0x54, 0x61,
	0x62, 0x6c, 0x65, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x26, 0x0a, 0x0a, 0x74, 0x61,
	0x62, 0x6c, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07,
	0xba, 0x48, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x09, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x06, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x07, 0xba, 0x48, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x06, 0x73, 0x63, 0x68,
	0x65, 0x6d, 0x61, 0x12, 0x27, 0x0a, 0x0a, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x70, 0x61, 0x63,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xba, 0x48, 0x04, 0x72, 0x02, 0x10, 0x01,
	0x52, 0x0a, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x12, 0x1f, 0x0a, 0x0b,
	0x69, 0x73, 0x5f, 0x75, 0x6e, 0x6c, 0x6f, 0x67, 0x67, 0x65, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x0a, 0x69, 0x73, 0x55, 0x6e, 0x6c, 0x6f, 0x67, 0x67, 0x65, 0x64, 0x12, 0x21, 0x0a,
	0x0c, 0x69, 0x73, 0x5f, 0x74, 0x65, 0x6d, 0x70, 0x6f, 0x72, 0x61, 0x72, 0x79, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x0b, 0x69, 0x73, 0x54, 0x65, 0x6d, 0x70, 0x6f, 0x72, 0x61, 0x72, 0x79,
	0x12, 0x43, 0x0a, 0x07, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x65, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x29, 0x2e, 0x70, 0x6f, 0x73, 0x74, 0x67, 0x72, 0x65, 0x73, 0x5f, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x5f, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6e, 0x64,
	0x65, 0x78, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x07, 0x69, 0x6e,
	0x64, 0x65, 0x78, 0x65, 0x73, 0x12, 0x51, 0x0a, 0x11, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x63,
	0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x74, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x24, 0x2e, 0x70, 0x6f, 0x73, 0x74, 0x67, 0x72, 0x65, 0x73, 0x5f, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x5f, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x73,
	0x74, 0x72, 0x61, 0x69, 0x6e, 0x74, 0x52, 0x10, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e,
	0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x74, 0x73, 0x12, 0x6c, 0x0a, 0x12, 0x73, 0x74, 0x6f, 0x72,
	0x61, 0x67, 0x65, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x18, 0x08,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x3d, 0x2e, 0x70, 0x6f, 0x73, 0x74, 0x67, 0x72, 0x65, 0x73, 0x5f,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x5f, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x76, 0x31, 0x2e,
	0x54, 0x61, 0x62, 0x6c, 0x65, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x53, 0x74, 0x6f,
	0x72, 0x61, 0x67, 0x65, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x52, 0x11, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x50, 0x61, 0x72, 0x61,
	0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x12, 0x4a, 0x0a, 0x0c, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x69, 0x6e, 0x67, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x70,
	0x6f, 0x73, 0x74, 0x67, 0x72, 0x65, 0x73, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x5f, 0x73, 0x63,
	0x68, 0x65, 0x6d, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x69, 0x6e, 0x67, 0x52, 0x0c, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x69,
	0x6e, 0x67, 0x12, 0x53, 0x0a, 0x0c, 0x72, 0x6c, 0x73, 0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x69,
	0x65, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x70, 0x6f, 0x73, 0x74, 0x67,
	0x72, 0x65, 0x73, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x5f, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61,
	0x2e, 0x76, 0x31, 0x2e, 0x52, 0x6f, 0x77, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x53, 0x65, 0x63, 0x75,
	0x72, 0x69, 0x74, 0x79, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x0b, 0x72, 0x6c, 0x73, 0x50,
	0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x12, 0x25, 0x0a, 0x09, 0x63, 0x6f, 0x6c, 0x6c, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xba, 0x48, 0x04, 0x72,
	0x02, 0x10, 0x01, 0x52, 0x09, 0x63, 0x6f, 0x6c, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x21,
	0x0a, 0x07, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x07, 0xba, 0x48, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x07, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67,
	0x65, 0x12, 0x29, 0x0a, 0x0b, 0x63, 0x6f, 0x6d, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xba, 0x48, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52,
	0x0b, 0x63, 0x6f, 0x6d, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x34, 0x0a, 0x11,
	0x73, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x5f, 0x74, 0x61, 0x72, 0x67, 0x65,
	0x74, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x05, 0x42, 0x07, 0xba, 0x48, 0x04, 0x1a, 0x02, 0x20, 0x00,
	0x52, 0x10, 0x73, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x54, 0x61, 0x72, 0x67,
	0x65, 0x74, 0x12, 0x5b, 0x0a, 0x11, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74,
	0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x22, 0x2e,
	0x70, 0x6f, 0x73, 0x74, 0x67, 0x72, 0x65, 0x73, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x5f, 0x73,
	0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72,
	0x6d, 0x42, 0x0a, 0xba, 0x48, 0x07, 0x82, 0x01, 0x04, 0x10, 0x01, 0x18, 0x22, 0x52, 0x10, 0x64,
	0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x1a,
	0x44, 0x0a, 0x16, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65,
	0x74, 0x65, 0x72, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x3a, 0x02, 0x38, 0x01, 0x4a, 0x05, 0x08, 0x64, 0x10, 0xc8, 0x01, 0x22, 0x6a, 0x0a, 0x05,
	0x54, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x1b, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x07, 0xba, 0x48, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x44, 0x0a, 0x07, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x73, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x70, 0x6f, 0x73, 0x74, 0x67, 0x72, 0x65, 0x73, 0x5f, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x5f, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x43,
	0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x42, 0x08, 0xba, 0x48, 0x05, 0x92, 0x01, 0x02, 0x08, 0x01, 0x52,
	0x07, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x73, 0x2a, 0xb7, 0x01, 0x0a, 0x0b, 0x49, 0x6e, 0x64,
	0x65, 0x78, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x12, 0x1c, 0x0a, 0x18, 0x49, 0x4e, 0x44, 0x45,
	0x58, 0x5f, 0x4d, 0x45, 0x54, 0x48, 0x4f, 0x44, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49,
	0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x16, 0x0a, 0x12, 0x49, 0x4e, 0x44, 0x45, 0x58, 0x5f,
	0x4d, 0x45, 0x54, 0x48, 0x4f, 0x44, 0x5f, 0x42, 0x54, 0x52, 0x45, 0x45, 0x10, 0x01, 0x12, 0x15,
	0x0a, 0x11, 0x49, 0x4e, 0x44, 0x45, 0x58, 0x5f, 0x4d, 0x45, 0x54, 0x48, 0x4f, 0x44, 0x5f, 0x48,
	0x41, 0x53, 0x48, 0x10, 0x02, 0x12, 0x15, 0x0a, 0x11, 0x49, 0x4e, 0x44, 0x45, 0x58, 0x5f, 0x4d,
	0x45, 0x54, 0x48, 0x4f, 0x44, 0x5f, 0x47, 0x49, 0x53, 0x54, 0x10, 0x03, 0x12, 0x17, 0x0a, 0x13,
	0x49, 0x4e, 0x44, 0x45, 0x58, 0x5f, 0x4d, 0x45, 0x54, 0x48, 0x4f, 0x44, 0x5f, 0x53, 0x50, 0x47,
	0x49, 0x53, 0x54, 0x10, 0x04, 0x12, 0x14, 0x0a, 0x10, 0x49, 0x4e, 0x44, 0x45, 0x58, 0x5f, 0x4d,
	0x45, 0x54, 0x48, 0x4f, 0x44, 0x5f, 0x47, 0x49, 0x4e, 0x10, 0x05, 0x12, 0x15, 0x0a, 0x11, 0x49,
	0x4e, 0x44, 0x45, 0x58, 0x5f, 0x4d, 0x45, 0x54, 0x48, 0x4f, 0x44, 0x5f, 0x42, 0x52, 0x49, 0x4e,
	0x10, 0x06, 0x2a, 0x85, 0x01, 0x0a, 0x0f, 0x50, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x12, 0x20, 0x0a, 0x1c, 0x50, 0x41, 0x52, 0x54, 0x49, 0x54,
	0x49, 0x4f, 0x4e, 0x5f, 0x4d, 0x45, 0x54, 0x48, 0x4f, 0x44, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45,
	0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x1a, 0x0a, 0x16, 0x50, 0x41, 0x52, 0x54,
	0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x4d, 0x45, 0x54, 0x48, 0x4f, 0x44, 0x5f, 0x52, 0x41, 0x4e,
	0x47, 0x45, 0x10, 0x01, 0x12, 0x19, 0x0a, 0x15, 0x50, 0x41, 0x52, 0x54, 0x49, 0x54, 0x49, 0x4f,
	0x4e, 0x5f, 0x4d, 0x45, 0x54, 0x48, 0x4f, 0x44, 0x5f, 0x48, 0x41, 0x53, 0x48, 0x10, 0x02, 0x12,
	0x19, 0x0a, 0x15, 0x50, 0x41, 0x52, 0x54, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x4d, 0x45, 0x54,
	0x48, 0x4f, 0x44, 0x5f, 0x4c, 0x49, 0x53, 0x54, 0x10, 0x03, 0x42, 0xbd, 0x01, 0x0a, 0x1c, 0x63,
	0x6f, 0x6d, 0x2e, 0x70, 0x6f, 0x73, 0x74, 0x67, 0x72, 0x65, 0x73, 0x5f, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x5f, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x76, 0x31, 0x42, 0x0a, 0x54, 0x61, 0x62,
	0x6c, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x18, 0x70, 0x6f, 0x73, 0x74, 0x67,
	0x72, 0x65, 0x73, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x5f, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61,
	0x2f, 0x76, 0x31, 0xa2, 0x02, 0x03, 0x50, 0x58, 0x58, 0xaa, 0x02, 0x16, 0x50, 0x6f, 0x73, 0x74,
	0x67, 0x72, 0x65, 0x73, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e,
	0x56, 0x31, 0xca, 0x02, 0x16, 0x50, 0x6f, 0x73, 0x74, 0x67, 0x72, 0x65, 0x73, 0x50, 0x72, 0x6f,
	0x74, 0x6f, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x5c, 0x56, 0x31, 0xe2, 0x02, 0x22, 0x50, 0x6f,
	0x73, 0x74, 0x67, 0x72, 0x65, 0x73, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x53, 0x63, 0x68, 0x65, 0x6d,
	0x61, 0x5c, 0x56, 0x31, 0x5c, 0x47, 0x50, 0x42, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61,
	0xea, 0x02, 0x17, 0x50, 0x6f, 0x73, 0x74, 0x67, 0x72, 0x65, 0x73, 0x50, 0x72, 0x6f, 0x74, 0x6f,
	0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x3a, 0x3a, 0x56, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x33,
}

var (
	file_postgres_proto_schema_v1_table_proto_rawDescOnce sync.Once
	file_postgres_proto_schema_v1_table_proto_rawDescData = file_postgres_proto_schema_v1_table_proto_rawDesc
)

func file_postgres_proto_schema_v1_table_proto_rawDescGZIP() []byte {
	file_postgres_proto_schema_v1_table_proto_rawDescOnce.Do(func() {
		file_postgres_proto_schema_v1_table_proto_rawDescData = protoimpl.X.CompressGZIP(file_postgres_proto_schema_v1_table_proto_rawDescData)
	})
	return file_postgres_proto_schema_v1_table_proto_rawDescData
}

var file_postgres_proto_schema_v1_table_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_postgres_proto_schema_v1_table_proto_msgTypes = make([]protoimpl.MessageInfo, 9)
var file_postgres_proto_schema_v1_table_proto_goTypes = []any{
	(IndexMethod)(0),               // 0: postgres_proto_schema.v1.IndexMethod
	(PartitionMethod)(0),           // 1: postgres_proto_schema.v1.PartitionMethod
	(*IndexDefinition)(nil),        // 2: postgres_proto_schema.v1.IndexDefinition
	(*Partitioning)(nil),           // 3: postgres_proto_schema.v1.Partitioning
	(*RowLevelSecurityPolicy)(nil), // 4: postgres_proto_schema.v1.RowLevelSecurityPolicy
	(*Patterns)(nil),               // 5: postgres_proto_schema.v1.Patterns
	(*TableOptions)(nil),           // 6: postgres_proto_schema.v1.TableOptions
	(*Table)(nil),                  // 7: postgres_proto_schema.v1.Table
	(*Patterns_Timestamps)(nil),    // 8: postgres_proto_schema.v1.Patterns.Timestamps
	(*Patterns_Audit)(nil),         // 9: postgres_proto_schema.v1.Patterns.Audit
	nil,                            // 10: postgres_proto_schema.v1.TableOptions.StorageParametersEntry
	(*Constraint)(nil),             // 11: postgres_proto_schema.v1.Constraint
	(Platform)(0),                  // 12: postgres_proto_schema.v1.Platform
	(*Column)(nil),                 // 13: postgres_proto_schema.v1.Column
}
var file_postgres_proto_schema_v1_table_proto_depIdxs = []int32{
	0,  // 0: postgres_proto_schema.v1.IndexDefinition.index_method:type_name -> postgres_proto_schema.v1.IndexMethod
	1,  // 1: postgres_proto_schema.v1.Partitioning.method:type_name -> postgres_proto_schema.v1.PartitionMethod
	2,  // 2: postgres_proto_schema.v1.TableOptions.indexes:type_name -> postgres_proto_schema.v1.IndexDefinition
	11, // 3: postgres_proto_schema.v1.TableOptions.table_constraints:type_name -> postgres_proto_schema.v1.Constraint
	10, // 4: postgres_proto_schema.v1.TableOptions.storage_parameters:type_name -> postgres_proto_schema.v1.TableOptions.StorageParametersEntry
	3,  // 5: postgres_proto_schema.v1.TableOptions.partitioning:type_name -> postgres_proto_schema.v1.Partitioning
	4,  // 6: postgres_proto_schema.v1.TableOptions.rls_policies:type_name -> postgres_proto_schema.v1.RowLevelSecurityPolicy
	12, // 7: postgres_proto_schema.v1.TableOptions.deployment_option:type_name -> postgres_proto_schema.v1.Platform
	13, // 8: postgres_proto_schema.v1.Table.columns:type_name -> postgres_proto_schema.v1.Column
	9,  // [9:9] is the sub-list for method output_type
	9,  // [9:9] is the sub-list for method input_type
	9,  // [9:9] is the sub-list for extension type_name
	9,  // [9:9] is the sub-list for extension extendee
	0,  // [0:9] is the sub-list for field type_name
}

func init() { file_postgres_proto_schema_v1_table_proto_init() }
func file_postgres_proto_schema_v1_table_proto_init() {
	if File_postgres_proto_schema_v1_table_proto != nil {
		return
	}
	file_buf_validate_validate_proto_init()
	file_postgres_proto_schema_v1_column_proto_init()
	file_postgres_proto_schema_v1_common_proto_init()
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_postgres_proto_schema_v1_table_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   9,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_postgres_proto_schema_v1_table_proto_goTypes,
		DependencyIndexes: file_postgres_proto_schema_v1_table_proto_depIdxs,
		EnumInfos:         file_postgres_proto_schema_v1_table_proto_enumTypes,
		MessageInfos:      file_postgres_proto_schema_v1_table_proto_msgTypes,
	}.Build()
	File_postgres_proto_schema_v1_table_proto = out.File
	file_postgres_proto_schema_v1_table_proto_rawDesc = nil
	file_postgres_proto_schema_v1_table_proto_goTypes = nil
	file_postgres_proto_schema_v1_table_proto_depIdxs = nil
}
